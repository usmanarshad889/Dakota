{"name": "test_contact_record_auto_sync", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_CLOSED\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A15BB6]\n\t(No symbol) [0x00007FF7C5A06879]\n\t(No symbol) [0x00007FF7C5A085D8]\n\t(No symbol) [0x00007FF7C5A06B86]\n\t(No symbol) [0x00007FF7C5A06606]\n\t(No symbol) [0x00007FF7C5A062CA]\n\t(No symbol) [0x00007FF7C5A03F6A]\n\t(No symbol) [0x00007FF7C5A0474C]\n\t(No symbol) [0x00007FF7C5A1D08A]\n\t(No symbol) [0x00007FF7C5ABFF9E]\n\t(No symbol) [0x00007FF7C5A9715A]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"800f11163f3217a9f721de043ca1a072\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_one\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mapping - Contact field Mapping\")\n    @allure.story(\"Validate successful mapping of contact fields.\")\n    def test_contact_record_auto_sync(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        url = f\"{config['uat_base_url']}lightning/o/Contact/list\"\n        driver.get(url)\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n    \n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(1)\n    \n    \n        # Navigate to login page of fuse app\n>       driver.get(config[\"base_url\"])\n\ntests\\Critical_Scenarios_for_Smoke_Testing\\test_contact_record_auto_sync.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000199B6307610>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_CLOSED\\\\n  (...C5C40379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_CLOSED\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A15BB6]\nE       \t(No symbol) [0x00007FF7C5A06879]\nE       \t(No symbol) [0x00007FF7C5A085D8]\nE       \t(No symbol) [0x00007FF7C5A06B86]\nE       \t(No symbol) [0x00007FF7C5A06606]\nE       \t(No symbol) [0x00007FF7C5A062CA]\nE       \t(No symbol) [0x00007FF7C5A03F6A]\nE       \t(No symbol) [0x00007FF7C5A0474C]\nE       \t(No symbol) [0x00007FF7C5A1D08A]\nE       \t(No symbol) [0x00007FF7C5ABFF9E]\nE       \t(No symbol) [0x00007FF7C5A9715A]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1745307887049, "stop": 1745307887059}], "start": 1745307854089, "stop": 1745307935202, "uuid": "11bb7a06-9900-4108-a5bd-1b84c7aad19f", "historyId": "1e579f8bf0bb5cf51eb9ee541adb9a12", "testCaseId": "1e579f8bf0bb5cf51eb9ee541adb9a12", "fullName": "tests.Critical_Scenarios_for_Smoke_Testing.test_contact_record_auto_sync#test_contact_record_auto_sync", "labels": [{"name": "feature", "value": "Mapping - Contact field Mapping"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Validate successful mapping of contact fields."}, {"name": "tag", "value": "release_one"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Critical_Scenarios_for_Smoke_Testing"}, {"name": "suite", "value": "test_contact_record_auto_sync"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "10436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Critical_Scenarios_for_Smoke_Testing.test_contact_record_auto_sync"}]}