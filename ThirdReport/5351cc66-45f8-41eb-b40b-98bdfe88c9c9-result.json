{"name": "test_contact_creation_upto_1000", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1e6868e4a2af91e5ffab51485f7d4e7b\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.regression\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mass Actions\")\n    @allure.story(\"Test mass actions for creating contact for up to 1000 records.\")\n    def test_contact_creation_upto_1000(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Navigate to installed packages setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Print Current Tab\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[@title='Contacts']\")))\n        print(f\"Current Tab : {tab.text}\")\n        tab.click()\n    \n        button = wait.until(EC.visibility_of_element_located((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n        print(f\"Button Text : {button.text}\")\n        time.sleep(8)\n    \n        # Select linked accounts from filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='DisplayCriteria'])[2]\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Unlinked Contacts\")\n        time.sleep(1)\n    \n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n        button.click()\n    \n        # Parameters\n        max_records = 1000\n        retry_limit = 3  # How many times to retry if no new records load\n    \n        # Initial wait\n        time.sleep(5)\n    \n        prev_count = 0\n    \n        while True:\n            # Get current loaded account names\n            names = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//tbody/tr/td[2]\")))\n            new_count = len(names)\n            print(f\"Records Loaded: {new_count}\")\n    \n            # Check if max limit reached\n            if new_count >= max_records:\n                print(f\"Reached {max_records} records. Stopping.\")\n                break\n    \n            # Retry checking if new records load\n            retries = 0\n            while retries < retry_limit:\n                # Scroll to last element\n                last_element = names[-1]\n                driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", last_element)\n                ActionChains(driver).move_to_element(last_element).perform()\n    \n                # Wait for new records to load\n                time.sleep(5)\n                names_after_scroll = driver.find_elements(By.XPATH, \"//tbody/tr/td[2]\")\n                updated_count = len(names_after_scroll)\n    \n                if updated_count > new_count:\n                    print(f\"New records loaded: {updated_count}\")\n                    prev_count = updated_count\n                    break  # New records loaded, continue loop\n                else:\n                    retries += 1\n                    print(f\"No new records, retry {retries}/{retry_limit}...\")\n    \n            # If no new records after retries, stop loop\n            if retries == retry_limit:\n                print(\"No more records loading. Stopping.\")\n                break\n    \n        # Optional: Scroll to the top after loading\n        first_element = names[0]\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", first_element)\n        ActionChains(driver).move_to_element(first_element).perform()\n    \n        print(\"All possible records loaded.\")\n        time.sleep(2)\n    \n    \n        # Click on ALL CHECKBOX\n        all_box = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[1]\")))\n        all_box.click()\n    \n        # Click on linked account\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='MassUploadActions']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Create Selected Contacts with Accounts\")\n        time.sleep(2)\n    \n        try:\n            toast_message = wait.until(EC.element_to_be_clickable(\n                (By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n            print(f\"Actual Toast Text : {toast_message.text}\")\n            assert toast_message.text != \"Attempt to de-reference a null object\" , f\"Error occurred : {toast_message.text}\"\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"No toast message/error found\")\n    \n        # Click on linked account\n>       btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='AddÂ Contacts']\")))\n\ntests\\Load_Records_Mass_Actions\\test_contact_creation_upto_1000.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1e6868e4a2af91e5ffab51485f7d4e7b\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001DE6491BCE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A6F19D]\nE       \t(No symbol) [0x00007FF7C5A6F44C]\nE       \t(No symbol) [0x00007FF7C5AC23D7]\nE       \t(No symbol) [0x00007FF7C5A9719F]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1745315453313, "stop": 1745315453368}], "start": 1745315418026, "stop": 1745315669688, "uuid": "36817438-4873-47ca-8c72-980124704638", "historyId": "1bcc9258f0f1b741894478ca7ea4b4f5", "testCaseId": "1bcc9258f0f1b741894478ca7ea4b4f5", "fullName": "tests.Load_Records_Mass_Actions.test_contact_creation_upto_1000#test_contact_creation_upto_1000", "labels": [{"name": "feature", "value": "Mass Actions"}, {"name": "story", "value": "Test mass actions for creating contact for up to 1000 records."}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "P1"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.Load_Records_Mass_Actions"}, {"name": "suite", "value": "test_contact_creation_upto_1000"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Load_Records_Mass_Actions.test_contact_creation_upto_1000"}]}