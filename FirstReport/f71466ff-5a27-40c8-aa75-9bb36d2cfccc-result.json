{"name": "test_mass_create_for_existing_contacts_email", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\n\tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\n\t(No symbol) [0x00007FF6C3918F9A]\n\t(No symbol) [0x00007FF6C396F4C6]\n\t(No symbol) [0x00007FF6C396F77C]\n\t(No symbol) [0x00007FF6C39C2577]\n\t(No symbol) [0x00007FF6C39973BF]\n\t(No symbol) [0x00007FF6C39BF39C]\n\t(No symbol) [0x00007FF6C3997153]\n\t(No symbol) [0x00007FF6C3960421]\n\t(No symbol) [0x00007FF6C39611B3]\n\tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\n\tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\n\tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\n\tGetHandleVerifier [0x00007FF6C3B669FA+180890]\n\tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\n\tGetHandleVerifier [0x00007FF6C3B55274+109332]\n\tGetHandleVerifier [0x00007FF6C3B55422+109762]\n\tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e448c6bce809aac17fbb522b45d75145\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_two\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Contact Linking\")\n    @allure.story('Test \"Link Selected Contacts to Existing Contacts\" with search by Email.')\n    def test_mass_create_for_existing_contacts_email(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to installed pakages setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Select the Contacts tab and print its text\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[@title='Contacts']\")))\n        print(f\"Current Tab : {tab.text}\")\n        tab.click()\n    \n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='DisplayCriteria'])[2]\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Unlinked Contacts\")\n        time.sleep(1)\n    \n        # Click on search button\n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\")))\n            btn.clear()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        # Click the Search button and print its text\n        search_button = wait.until(EC.visibility_of_element_located(\n            (By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")\n        ))\n        print(f\"Button Text : {search_button.text}\")\n        time.sleep(5)\n        search_button.click()\n    \n        # Click on ALL CHECKBOX\n        all_box = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[contains(@class,'slds-checkbox_faux')])[1]\")))\n        all_box.click()\n    \n        # Click on linked account\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='MassUploadActions']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Link Selected Contacts to Existing Contacts\")\n    \n        # Click on linked account\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@class='slds-select'])[6]\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Dakota Email\")\n    \n        try:\n            dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@class='slds-select'])[7]\")))\n            dropdown_option = Select(dropdown)\n            dropdown_option.select_by_visible_text(\"Email\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@class,'slds-button slds-button_neutral slds-button slds-button--brand')][normalize-space()='Search']\"))).click()\n        time.sleep(8)\n    \n    \n        # Click on linked contacts\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='LinkÂ Contacts']\")))\n        btn.click()\n    \n        time.sleep(2)\n    \n>       toast_message = wait.until(EC.element_to_be_clickable(\n            (By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n\ntests\\Mass_Create_and_Link_Actions_Contacts\\test_mass_create_contacts_with_existing_contacts_email.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e448c6bce809aac17fbb522b45d75145\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001A63B05D620>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\nE       \t(No symbol) [0x00007FF6C3918F9A]\nE       \t(No symbol) [0x00007FF6C396F4C6]\nE       \t(No symbol) [0x00007FF6C396F77C]\nE       \t(No symbol) [0x00007FF6C39C2577]\nE       \t(No symbol) [0x00007FF6C39973BF]\nE       \t(No symbol) [0x00007FF6C39BF39C]\nE       \t(No symbol) [0x00007FF6C3997153]\nE       \t(No symbol) [0x00007FF6C3960421]\nE       \t(No symbol) [0x00007FF6C39611B3]\nE       \tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF6C3B669FA+180890]\nE       \tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF6C3B55274+109332]\nE       \tGetHandleVerifier [0x00007FF6C3B55422+109762]\nE       \tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748267439816, "stop": 1748267439846}], "start": 1748267412386, "stop": 1748267620246, "uuid": "08cf500c-0215-42fa-b61a-9ee7ef27e8cf", "historyId": "74dd1e2a021a0a3c0dde55d989ff09db", "testCaseId": "74dd1e2a021a0a3c0dde55d989ff09db", "fullName": "tests.Mass_Create_and_Link_Actions_Contacts.test_mass_create_contacts_with_existing_contacts_email#test_mass_create_for_existing_contacts_email", "labels": [{"name": "story", "value": "Test \"Link Selected Contacts to Existing Contacts\" with search by Email."}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Contact Linking"}, {"name": "tag", "value": "release_two"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Mass_Create_and_Link_Actions_Contacts"}, {"name": "suite", "value": "test_mass_create_contacts_with_existing_contacts_email"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Mass_Create_and_Link_Actions_Contacts.test_mass_create_contacts_with_existing_contacts_email"}]}