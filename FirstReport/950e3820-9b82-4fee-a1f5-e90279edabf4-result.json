{"name": "test_link_unlink_account", "status": "passed", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Could not locate element with visible text: Dakota Name; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ccd7e95eada263854d6d7af0b8af789e\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.release_one\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Linking/Unlinking - Account Linking and Unlinking\")\n    @allure.story(\"Validate successful linking and unlinking of Accounts.\")\n    def test_link_unlink_account(driver, config):\n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to installed pakages setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='DisplayCriteria']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Unlinked Accounts\")\n        time.sleep(1)\n    \n        # Click on search button\n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='searchTerm']\")))\n            btn.clear()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n        time.sleep(5)\n        btn.click()\n    \n        # store account name\n        account_field = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[1]/td[2]\")))\n        account_name = account_field.text\n    \n        # Click on first account name checkbox\n        first_box = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[contains(@class,'slds-checkbox_faux')])[2]\")))\n        first_box.click()\n    \n        # Click on linked account\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='MassUploadActions']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Link Account\")\n    \n        # Click on linked account\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@class='slds-select'])[4]\")))\n        dropdown_option = Select(dropdown)\n>       dropdown_option.select_by_visible_text(\"Dakota Name\")\n\ntests\\Critical_Scenarios_for_Smoke_Testing\\test_link_and_unlink_account.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.select.Select object at 0x000001A639A5F4D0>, text = 'Dakota Name'\n\n    def select_by_visible_text(self, text: str) -> None:\n        \"\"\"Select all options that display text matching the argument. That is,\n        when given \"Bar\" this would select an option like:\n    \n         <option value=\"foo\">Bar</option>\n    \n        :Args:\n         - text - The visible text to match against\n    \n         throws NoSuchElementException If there is no option with specified text in SELECT\n        \"\"\"\n        xpath = f\".//option[normalize-space(.) = {self._escape_string(text)}]\"\n        opts = self._el.find_elements(By.XPATH, xpath)\n        matched = False\n        for opt in opts:\n            if not self._has_css_property_and_visible(opt):\n                raise NoSuchElementException(f\"Invisible option with text: {text}\")\n            self._set_selected(opt)\n            if not self.is_multiple:\n                return\n            matched = True\n    \n        if len(opts) == 0 and \" \" in text:\n            sub_string_without_space = self._get_longest_token(text)\n            if sub_string_without_space == \"\":\n                candidates = self.options\n            else:\n                xpath = f\".//option[contains(.,{self._escape_string(sub_string_without_space)})]\"\n                candidates = self._el.find_elements(By.XPATH, xpath)\n            for candidate in candidates:\n                if text == candidate.text:\n                    if not self._has_css_property_and_visible(candidate):\n                        raise NoSuchElementException(f\"Invisible option with text: {text}\")\n                    self._set_selected(candidate)\n                    if not self.is_multiple:\n                        return\n                    matched = True\n    \n        if not matched:\n>           raise NoSuchElementException(f\"Could not locate element with visible text: {text}\")\nE           selenium.common.exceptions.NoSuchElementException: Message: Could not locate element with visible text: Dakota Name; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\select.py:140: NoSuchElementException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258400880, "stop": 1748258400912}], "start": 1748258326734, "stop": 1748258418972, "uuid": "f4698451-cc7f-48bd-9074-f594db4e8a5a", "historyId": "eb7f493693a6023eb2035c4ff3b60b55", "testCaseId": "eb7f493693a6023eb2035c4ff3b60b55", "fullName": "tests.Critical_Scenarios_for_Smoke_Testing.test_link_and_unlink_account#test_link_unlink_account", "labels": [{"name": "story", "value": "Validate successful linking and unlinking of Accounts."}, {"name": "feature", "value": "Linking/Unlinking - Account Linking and Unlinking"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "P1"}, {"name": "tag", "value": "release_one"}, {"name": "parentSuite", "value": "tests.Critical_Scenarios_for_Smoke_Testing"}, {"name": "suite", "value": "test_link_and_unlink_account"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Critical_Scenarios_for_Smoke_Testing.test_link_and_unlink_account"}]}