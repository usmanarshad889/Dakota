{"name": "test_search_functionality_account_fields", "status": "failed", "statusDetails": {"message": "AssertionError: Test failed: Stopping condition not met after 5 attempts\nassert 5 < 5", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"acab21cb8148f1a90254cc452f4cf9f5\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.release_one\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Search Functionality - Account filter\")\n    @allure.story(\"Validate accounts page filter are working correctly.\")\n    def test_search_functionality_account_fields(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        driver.get(f\"{config['uat_base_url']}lightning/o/Account/list?filterName=__Recent\")\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        record_type = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        record_type.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Name']\")))\n        name_field.send_keys(name_var)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        field.send_keys(phone_var)\n    \n        # Select website\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Website']\")))\n        field.send_keys(email_var)\n    \n        # Select Type\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@data-value='--None--'])[2]\")))\n        field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[4]\")))\n        btn.click()\n    \n    \n        # Select CRD\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='CRD__c']\")))\n        field.send_keys(\"3546\")\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Website']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='AUM__c']\")))\n        element.send_keys(\"10000\")\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # # Select Metro Area\n        # field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Metro Areas...']\")))\n        # field.click()\n        # time.sleep(5)\n        # ssss = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//li[@role='presentation'])[6]\")))\n        # first_line = ssss.text.splitlines()[0]\n        # print(first_line)\n        # ssss.click()\n    \n    \n    \n        # Select Metro Area\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Metro Areas...']\")))\n        field.click()\n        time.sleep(5)\n        field.send_keys(\"Bosto\")\n        time.sleep(5)\n        values = driver.find_elements(By.XPATH, \"(//lightning-base-combobox-item[@role='option'])\")\n        index_to_use = None  # Store index of \"Boston\"\n        for index, s in enumerate(values, start=1):\n            # print(f\"{index}: {s.text.strip()}\")\n            # If \"Boston\" is found anywhere in the list, store its index\n            if \"Boston\" in s.text.strip():\n                index_to_use = index\n                break  # Stop searching after finding the first \"Boston\"\n        # Click the element if \"Boston\" was found\n        if index_to_use is not None:\n            print(f\"Using index {index_to_use} to click 'Boston'.\")\n            try:\n                element = wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, f\"(//lightning-base-combobox-item[@role='option'])[{index_to_use}]\")))\n                first_line = element.text.splitlines()[0] if element.text.strip() else \"No text found\"\n                # print(f\"First line of selected element: {first_line}\")\n                element.click()\n            except Exception as e:\n                print(f\"Error: {type(e).__name__}\")\n        else:\n            print(\"Boston was not found in the list.\")\n        time.sleep(1)\n    \n    \n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Average_Ticket_Size__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Total_Participants__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Trial_Start_Date__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Copyright__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='SEC_Registered_Date__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        state_name = \"Florida\"\n        # Select Address information\n        element = driver.find_element(By.XPATH, \"//input[@name='city']\")\n        element.send_keys(\"Miami\")\n        element = driver.find_element(By.XPATH, \"//input[@name='province']\")\n        element.send_keys(state_name)\n        element = driver.find_element(By.XPATH, \"//input[@name='country']\")\n        element.send_keys(\"United States\")\n        time.sleep(1)\n    \n    \n        element = driver.find_element(By.XPATH, \"//input[@name='X100_Marketplace__c']\")\n        element.click()\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//textarea[@maxlength='255'])[2]\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//textarea[@maxlength='131072'])[3]\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Form_ADV_Part_2A_Brochure__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Non_Discretionary_Assets__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='ETF Usage']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Large Cap Equities']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Unconstrained']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Private_Credit_Average_Ticket_Size__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Co-Investments']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='News_Page__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(),'Matterhorn PM Call')]\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='PN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@placeholder='Search Accounts...'])[12]\")))\n        # btn.click()\n        # time.sleep(2)\n        # btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[1]\")))\n        # print(btn.text)\n        # btn.click()\n    \n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating account : {toast_massage}\"\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n    \n        # Navigate to Market Place Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n        time.sleep(3)\n    \n        # Define the stopping condition element\n        stopping_condition_locator = (By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n    \n        max_attempts = 5\n        attempts = 0\n    \n        while attempts < max_attempts:\n            # Refresh page and clear cookies\n            driver.refresh()\n    \n            # Wait for search input and enter the search term\n            name_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='searchTerm']\")))\n            name_input.clear()\n            time.sleep(5)\n            name_input.send_keys(name_var)\n    \n            search_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n            search_element.click()\n    \n            # Double-click search button multiple times until condition is met\n            actions = ActionChains(driver)\n            for _ in range(3):\n                if driver.find_elements(*stopping_condition_locator):\n                    print(\"Stopping condition met. Exiting loop.\")\n                    break\n    \n                actions.double_click(search_element).perform()\n    \n            # If element is found, exit the while loop\n            if driver.find_elements(*stopping_condition_locator):\n                break\n    \n            attempts += 1  # Increment attempt counter\n    \n        # Fail test if maximum attempts reached and condition is not met\n>       assert attempts < max_attempts, \"Test failed: Stopping condition not met after 5 attempts\"\nE       AssertionError: Test failed: Stopping condition not met after 5 attempts\nE       assert 5 < 5\n\ntests\\Critical_Scenarios_for_Smoke_Testing\\test_search_functionality_account_fields.py:339: AssertionError"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258567481, "stop": 1748258567494}, {"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258641002, "stop": 1748258641020}], "start": 1748258523047, "stop": 1748258692387, "uuid": "4dcb2d52-07cb-4c50-844f-f856e002b0ae", "historyId": "079ae372e5119660f689d5fe9501839f", "testCaseId": "079ae372e5119660f689d5fe9501839f", "fullName": "tests.Critical_Scenarios_for_Smoke_Testing.test_search_functionality_account_fields#test_search_functionality_account_fields", "labels": [{"name": "feature", "value": "Search Functionality - Account filter"}, {"name": "story", "value": "Validate accounts page filter are working correctly."}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "P1"}, {"name": "tag", "value": "release_one"}, {"name": "parentSuite", "value": "tests.Critical_Scenarios_for_Smoke_Testing"}, {"name": "suite", "value": "test_search_functionality_account_fields"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Critical_Scenarios_for_Smoke_Testing.test_search_functionality_account_fields"}]}