{"name": "test_follow_contact_notification", "status": "passed", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button marketplace-dakotacontactfields_dakotacontactfields=\"\" class=\"slds-button slds-button_neutral cstm_follow_btn_div followBtnSize\" title=\"Follow\">...</button> is not clickable at point (948, 17). Other element would receive the click: <span data-aura-rendered-by=\"7:160;a\">...</span>\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\n\tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\n\t(No symbol) [0x00007FF6C3918F9A]\n\t(No symbol) [0x00007FF6C3977439]\n\t(No symbol) [0x00007FF6C3974DF2]\n\t(No symbol) [0x00007FF6C3971EA1]\n\t(No symbol) [0x00007FF6C3970DA1]\n\t(No symbol) [0x00007FF6C3962394]\n\t(No symbol) [0x00007FF6C399737A]\n\t(No symbol) [0x00007FF6C3961C46]\n\t(No symbol) [0x00007FF6C3997590]\n\t(No symbol) [0x00007FF6C39BF39C]\n\t(No symbol) [0x00007FF6C3997153]\n\t(No symbol) [0x00007FF6C3960421]\n\t(No symbol) [0x00007FF6C39611B3]\n\tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\n\tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\n\tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\n\tGetHandleVerifier [0x00007FF6C3B669FA+180890]\n\tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\n\tGetHandleVerifier [0x00007FF6C3B55274+109332]\n\tGetHandleVerifier [0x00007FF6C3B55422+109762]\n\tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ebe10b6419cb10ff42ae5f175723fec5\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Followed Contacts Notifications\")\n    @allure.story(\"Validate email notifications sent on updates to followed contacts.\")\n    def test_follow_contact_notification(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Navigate to installed packages setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\")\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[3]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\")))\n        element.click()\n        time.sleep(1)\n    \n        # Scroll down by 500 pixels\n        driver.execute_script(\"window.scrollBy(0, 800);\")\n        time.sleep(7)\n    \n    \n        try:\n            # Sync Account/Contact Type Field\n            inactive_button = driver.find_element(By.XPATH, \"(//span[@class='slds-checkbox_off'])[1]\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[1]\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(\"Sync Account/Contact Type toggle button is not working\")\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        try:\n            # Receive Follow Notification\n            inactive_button = driver.find_element(By.XPATH, \"(//span[@class='slds-checkbox_off'])[4]\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[4]\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(\"Receive Follow Notification toggle button is not working\")\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        try:\n            # Notification Setting\n            xpath = '''(//select[@name='a7Fdy0000003GkzEAE'])[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Send Email\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Setting not selected\")\n    \n    \n        try:\n            # Notification Recipient\n            xpath = '''(//select[@name='a7Fdy0000003GkzEAE'])[2]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"User\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Recipient not selected\")\n    \n    \n        try:\n            # Notification Assignee User/Group\n            input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Select a value..']\")))\n            input_field.click()\n            input_field_value = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Filter values..']\")))\n            input_field_value.send_keys(\"Aiman Shakil\")\n            option = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@title='Aiman Shakil']\")))\n            option.click()\n            input_field.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Assignee User/Group not selected\")\n    \n    \n        # Select Save Option\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Save']\")))\n        save_btn.click()\n        time.sleep(2)\n    \n        toast_message = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        text = toast_message.text\n        print(f\"Actual Toast message : {text}\")\n    \n        assert text in [\"Mapping saved successfully.\", \"Status changed successfully!\"], f\"Unexpected toast message: {text}\"\n        time.sleep(2)\n    \n    \n        # Navigate to Marketplace Setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Print Current Tab\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[@title='Contacts']\")))\n        tab.click()\n        print(f\"Current Tab : {tab.text}\")\n    \n        button = wait.until(EC.visibility_of_element_located((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n        print(f\"Button Text : {button.text}\")\n        time.sleep(8)\n    \n        # Select linked accounts from filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='DisplayCriteria'])[2]\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Linked Contacts\")\n    \n    \n        # Select Marketplace Created Date filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='CRMCreatedDate'])[2]\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Last 30 Days\")\n    \n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Contact Name']\")))\n        name_field.send_keys(\"Test\")\n        time.sleep(1)\n    \n        # Click on Search Button\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n        button.click()\n    \n        # Wait until all contacts buttons are present\n        contacts = WebDriverWait(driver, 30).until(\n            EC.presence_of_all_elements_located((By.XPATH, \"//button[@name='previewContact']\"))\n        )\n    \n        contact_name = None\n    \n        # Check if contacts were found\n        if contacts:\n            # Randomly pick one contact from the list\n            random_contact = random.choice(contacts)\n    \n            # Scroll to the selected contact\n            driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", random_contact)\n            time.sleep(1)\n    \n            # Store the contact name (optional: add a small wait if text loads dynamically)\n            contact_name = random_contact.text.strip()\n            print(f\"Selected Contact Name: {contact_name}\")\n    \n            # Click on the contact using ActionChains (or JS click if needed)\n            ActionChains(driver).move_to_element(random_contact).click().perform()\n    \n        else:\n            print(\"No contacts found.\")\n    \n        # Get all window handles (list of tabs)\n        tabs = driver.window_handles\n        print(\"Open tabs:\", len(tabs))  # Print number of tabs\n    \n    \n        # Switch to the second tab (index 1)\n        driver.switch_to.window(tabs[1])\n        time.sleep(5)\n    \n    \n        # Verify by printing the current page title\n        print(\"Switched to Tab - Title:\", driver.title)\n    \n    \n        # Scroll down by 300 pixels\n        xpath = '''(//span[normalize-space()='Contact Record Type'])[1]'''\n        element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n    \n        # Check if account is already followed\n        following_buttons = driver.find_elements(By.XPATH, \"//button[@title='Following']\")\n    \n        if following_buttons:\n            print(\"Account is already followed. No action needed.\")\n            # Assert that the \"Following\" button is visible (sanity check)\n            assert following_buttons[0].is_displayed(), \"Following button is not visible as expected.\"\n        else:\n            # Click on 'Follow' button to follow the account\n            follow_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Follow']\")))\n>           follow_button.click()\n\ntests\\Follow_Notification_Email\\test_follow_contact_notification.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A63B03FFC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...C3B3BA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF906EBC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button marketplace-dakotacontactfields_dakotacontactfields=\"\" class=\"slds-button slds-button_neutral cstm_follow_btn_div followBtnSize\" title=\"Follow\">...</button> is not clickable at point (948, 17). Other element would receive the click: <span data-aura-rendered-by=\"7:160;a\">...</span>\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\nE       \t(No symbol) [0x00007FF6C3918F9A]\nE       \t(No symbol) [0x00007FF6C3977439]\nE       \t(No symbol) [0x00007FF6C3974DF2]\nE       \t(No symbol) [0x00007FF6C3971EA1]\nE       \t(No symbol) [0x00007FF6C3970DA1]\nE       \t(No symbol) [0x00007FF6C3962394]\nE       \t(No symbol) [0x00007FF6C399737A]\nE       \t(No symbol) [0x00007FF6C3961C46]\nE       \t(No symbol) [0x00007FF6C3997590]\nE       \t(No symbol) [0x00007FF6C39BF39C]\nE       \t(No symbol) [0x00007FF6C3997153]\nE       \t(No symbol) [0x00007FF6C3960421]\nE       \t(No symbol) [0x00007FF6C39611B3]\nE       \tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF6C3B669FA+180890]\nE       \tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF6C3B55274+109332]\nE       \tGetHandleVerifier [0x00007FF6C3B55422+109762]\nE       \tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748263839014, "stop": 1748263839874}], "start": 1748263800544, "stop": 1748263977184, "uuid": "660c468c-9979-4053-b29a-3c60d63793f8", "historyId": "9a9e35976682b2189a211025f5210a0c", "testCaseId": "9a9e35976682b2189a211025f5210a0c", "fullName": "tests.Follow_Notification_Email.test_follow_contact_notification#test_follow_contact_notification", "labels": [{"name": "feature", "value": "Followed Contacts Notifications"}, {"name": "story", "value": "Validate email notifications sent on updates to followed contacts."}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "P1"}, {"name": "tag", "value": "Skipped"}, {"name": "parentSuite", "value": "tests.Follow_Notification_Email"}, {"name": "suite", "value": "test_follow_contact_notification"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Follow_Notification_Email.test_follow_contact_notification"}]}