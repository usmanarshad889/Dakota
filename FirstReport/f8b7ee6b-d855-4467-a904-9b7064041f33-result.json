{"name": "test_account_record_auto_sync", "status": "passed", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\n\tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\n\t(No symbol) [0x00007FF6C3918F9A]\n\t(No symbol) [0x00007FF6C396F4C6]\n\t(No symbol) [0x00007FF6C396F77C]\n\t(No symbol) [0x00007FF6C39C2577]\n\t(No symbol) [0x00007FF6C39973BF]\n\t(No symbol) [0x00007FF6C39BF39C]\n\t(No symbol) [0x00007FF6C3997153]\n\t(No symbol) [0x00007FF6C3960421]\n\t(No symbol) [0x00007FF6C39611B3]\n\tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\n\tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\n\tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\n\tGetHandleVerifier [0x00007FF6C3B669FA+180890]\n\tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\n\tGetHandleVerifier [0x00007FF6C3B55274+109332]\n\tGetHandleVerifier [0x00007FF6C3B55422+109762]\n\tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c66878e0f0ef263212dcba5bd09b0c8d\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_one\n    @pytest.mark.demo\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mapping - Account field Mapping\")\n    @allure.story(\"Validate successful mapping of account fields.\")\n    def test_account_record_auto_sync(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        driver.get(f\"{config['uat_base_url']}lightning/o/Account/list?filterName=__Recent\")\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        record_type = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        record_type.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Name']\")))\n        name_field.send_keys(name_var)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        field.send_keys(phone_var)\n    \n        # Select website\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Website']\")))\n        field.send_keys(email_var)\n    \n        # Select Type\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@data-value='--None--'])[2]\")))\n        field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[4]\")))\n        btn.click()\n    \n        # Select CRD\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='CRD__c']\")))\n        field.send_keys(\"3546\")\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Website']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='AUM__c']\")))\n        element.send_keys(\"10000\")\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Average_Ticket_Size__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Total_Participants__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Trial_Start_Date__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Copyright__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='SEC_Registered_Date__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Billing Street']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Billing Zip/Postal Code']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        element = driver.find_element(By.XPATH, \"//input[@name='X100_Marketplace__c']\")\n        element.click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating account : {toast_massage}\"\n        time.sleep(2)\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n    \n        retries = 5\n        for attempt in range(retries):\n            try:\n                driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\")\n                break  # Exit the loop if the page loads successfully\n            except TimeoutException:\n                print(f\"Attempt {attempt + 1} failed. Retrying...\")\n                time.sleep(5)  # Wait before retrying\n        else:\n            print(\"All retry attempts failed.\")\n    \n    \n        # Click on Authentication svg button\n        try:\n            # Wait for full page load\n            wait.until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n    \n            element = wait.until(\n                EC.element_to_be_clickable((By.XPATH, \"//li[1]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\"))\n            )\n            element.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Verify the Authentication with correct Credentials\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Username']\"))).clear()\n        driver.find_element(By.XPATH, \"//input[@name='Username']\").send_keys(\"Fuse Upgrade\")\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").send_keys(\"rolus009\")\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").send_keys(\"https://marketplace-dakota-uat.herokuapp.com\")\n        time.sleep(1)\n    \n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Connect']\")))\n            driver.execute_script(\"arguments[0].click();\", btn)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(2)\n    \n        toast = WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        print(f\"Toast message : {toast.text}\")\n    \n        # Verify the Toast message\n        assert toast.text.lower() == \"dakota marketplace account connected successfully.\", f\"Test failed: {toast.text}\"\n        time.sleep(3)\n    \n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[2]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\")))\n        element.click()\n        time.sleep(1)\n    \n    \n        try:\n            # Click on Auto Sync Field Updates\n            inactive_button = driver.find_element(By.XPATH, \"//span[@class='slds-checkbox_off']\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='slds-checkbox_faux']\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        # Scroll down by 500 pixels\n        driver.execute_script(\"window.scrollBy(0, 500);\")\n        time.sleep(10)\n    \n        # Select phone with CRD\n>       select_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='a7Ndy0000001H3gEAE'])[1]\")))\n\ntests\\Critical_Scenarios_for_Smoke_Testing\\test_account_record_auto_sync.py:279: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c66878e0f0ef263212dcba5bd09b0c8d\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001A639AF8860>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\nE       \t(No symbol) [0x00007FF6C3918F9A]\nE       \t(No symbol) [0x00007FF6C396F4C6]\nE       \t(No symbol) [0x00007FF6C396F77C]\nE       \t(No symbol) [0x00007FF6C39C2577]\nE       \t(No symbol) [0x00007FF6C39973BF]\nE       \t(No symbol) [0x00007FF6C39BF39C]\nE       \t(No symbol) [0x00007FF6C3997153]\nE       \t(No symbol) [0x00007FF6C3960421]\nE       \t(No symbol) [0x00007FF6C39611B3]\nE       \tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF6C3B669FA+180890]\nE       \tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF6C3B55274+109332]\nE       \tGetHandleVerifier [0x00007FF6C3B55422+109762]\nE       \tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748257946444, "stop": 1748257946461}, {"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258034657, "stop": 1748258070669}], "start": 1748257860221, "stop": 1748258155589, "uuid": "ca3f7716-47e9-459c-90d8-11da6dcc3c3b", "historyId": "a9de257e99835cfefc80f0aee97f934c", "testCaseId": "a9de257e99835cfefc80f0aee97f934c", "fullName": "tests.Critical_Scenarios_for_Smoke_Testing.test_account_record_auto_sync#test_account_record_auto_sync", "labels": [{"name": "feature", "value": "Mapping - Account field Mapping"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Validate successful mapping of account fields."}, {"name": "tag", "value": "demo"}, {"name": "tag", "value": "release_one"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Critical_Scenarios_for_Smoke_Testing"}, {"name": "suite", "value": "test_account_record_auto_sync"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Critical_Scenarios_for_Smoke_Testing.test_account_record_auto_sync"}]}