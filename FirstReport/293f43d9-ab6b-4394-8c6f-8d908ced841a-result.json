{"name": "test_search_functionality_contact_fields", "status": "passed", "statusDetails": {"message": "AssertionError: Test failed: Stopping condition not met after 5 attempts\nassert 5 < 5", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9003e0773a31de73fa647ed8cb3e6254\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.release_one\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Search Functionality - Contact filter\")\n    @allure.story(\"Validate contacts page filter are working correctly.\")\n    def test_search_functionality_contact_fields(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        driver.get(f\"{config['uat_base_url']}lightning/o/Contact/list\")\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        # Select city\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        field.send_keys(\"Miami\")\n    \n        # Select state\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='province']\")))\n        field.send_keys(\"Florida\")\n    \n        # Select country\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='country']\")))\n        field.send_keys(\"United States\")\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        print(dropdown_option.text)\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # Select Asset Class Coverage\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Asset Class Coverage']\")))\n        btn.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Commodities']\")))\n        btn.click()\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Territory']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # Select Channel Focus\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@title='Banks']\")))\n        btn.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@title='Move to Chosen'])[3]\")))\n        btn.click()\n    \n        # Select Metro Area\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Metro Areas...']\")))\n        field.click()\n        field.send_keys(\"Bosto\")\n        time.sleep(5)\n        values = driver.find_elements(By.XPATH, \"(//lightning-base-combobox-item[@role='option'])\")\n        index_to_use = None  # Store index of \"Boston\"\n        for index, s in enumerate(values, start=1):\n            # print(f\"{index}: {s.text.strip()}\")\n            # If \"Boston\" is found anywhere in the list, store its index\n            if \"Boston\" in s.text.strip():\n                index_to_use = index\n                break  # Stop searching after finding the first \"Boston\"\n        # Click the element if \"Boston\" was found\n        if index_to_use is not None:\n            print(f\"Using index {index_to_use} to click 'Boston'.\")\n            try:\n                element = wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, f\"(//lightning-base-combobox-item[@role='option'])[{index_to_use}]\")))\n                first_line = element.text.splitlines()[0] if element.text.strip() else \"No text found\"\n                # print(f\"First line of selected element: {first_line}\")\n                element.click()\n            except Exception as e:\n                print(f\"Error: {type(e).__name__}\")\n        else:\n            print(\"Boston was not found in the list.\")\n        time.sleep(1)\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(2)\n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n    \n        # Navigate to Market Place Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Define the stopping condition element\n        stopping_condition_locator = (By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n    \n        max_attempts = 5\n        attempts = 0\n    \n        while attempts < max_attempts:\n            # Refresh page and clear cookies\n            driver.refresh()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\"))).click()\n    \n            # Wait for search input and enter the search term\n            name_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\")))\n            name_input.clear()\n            name_input.send_keys(search_name)\n    \n            search_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n    \n            # Double-click search button multiple times until condition is met\n            actions = ActionChains(driver)\n            for _ in range(3):\n                if driver.find_elements(*stopping_condition_locator):\n                    print(\"Stopping condition met. Exiting loop.\")\n                    break\n    \n                actions.double_click(search_element).perform()\n    \n            # If element is found, exit the while loop\n            if driver.find_elements(*stopping_condition_locator):\n                break\n    \n            attempts += 1  # Increment attempt counter\n    \n        # Fail test if maximum attempts reached and condition is not met\n>       assert attempts < max_attempts, \"Test failed: Stopping condition not met after 5 attempts\"\nE       AssertionError: Test failed: Stopping condition not met after 5 attempts\nE       assert 5 < 5\n\ntests\\Critical_Scenarios_for_Smoke_Testing\\test_search_functionality_contact_fields.py:305: AssertionError"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258795615, "stop": 1748258795629}, {"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258886183, "stop": 1748258886392}], "start": 1748258696090, "stop": 1748258929113, "uuid": "278c4a1f-d7c0-4986-bda2-e3bfb5f751b3", "historyId": "4b45c489b2465025f20592fd2aac8a9d", "testCaseId": "4b45c489b2465025f20592fd2aac8a9d", "fullName": "tests.Critical_Scenarios_for_Smoke_Testing.test_search_functionality_contact_fields#test_search_functionality_contact_fields", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "Search Functionality - Contact filter"}, {"name": "story", "value": "Validate contacts page filter are working correctly."}, {"name": "tag", "value": "P1"}, {"name": "tag", "value": "release_one"}, {"name": "parentSuite", "value": "tests.Critical_Scenarios_for_Smoke_Testing"}, {"name": "suite", "value": "test_search_functionality_contact_fields"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Critical_Scenarios_for_Smoke_Testing.test_search_functionality_contact_fields"}]}