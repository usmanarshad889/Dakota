{"name": "test_contact_record_auto_sync", "status": "passed", "statusDetails": {"message": "AssertionError: Test failed: Unable to authenticate due to Permission rights. Please contact System Administrator.\nassert 'unable to au...dministrator.' == 'dakota marke...successfully.'\n  \n  - dakota marketplace account connected successfully.\n  + unable to authenticate due to permission rights. please contact system administrator.", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"22985473ba1284471ba88d2e4ad99d00\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_one\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mapping - Contact field Mapping\")\n    @allure.story(\"Validate successful mapping of contact fields.\")\n    def test_contact_record_auto_sync(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        url = f\"{config['uat_base_url']}lightning/o/Contact/list\"\n        driver.get(url)\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n    \n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(1)\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        retries = 5\n        for attempt in range(retries):\n            try:\n                url = f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\"\n                driver.get(url)\n                break  # Exit the loop if the page loads successfully\n            except TimeoutException:\n                print(f\"Attempt {attempt + 1} failed. Retrying...\")\n                time.sleep(5)  # Wait before retrying\n        else:\n            print(\"All retry attempts failed.\")\n    \n        # Click on Authentication svg button\n        try:\n            # Wait for full page load\n            wait.until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n    \n            element = wait.until(\n                EC.element_to_be_clickable((By.XPATH, \"//li[1]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\"))\n            )\n            element.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n            pass\n        time.sleep(1)\n    \n        # Verify the Authentication with correct Credentials\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Username']\"))).clear()\n        driver.find_element(By.XPATH, \"//input[@name='Username']\").send_keys(\"Fuse Upgrade\")\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").send_keys(\"rolus009\")\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").send_keys(\"https://marketplace-dakota-uat.herokuapp.com\")\n        time.sleep(1)\n    \n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Connect']\")))\n            driver.execute_script(\"arguments[0].click();\", btn)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(2)\n    \n        toast = WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        print(f\"Toast message : {toast.text}\")\n    \n        # Verify the Toast message\n>       assert toast.text.lower() == \"dakota marketplace account connected successfully.\", f\"Test failed: {toast.text}\"\nE       AssertionError: Test failed: Unable to authenticate due to Permission rights. Please contact System Administrator.\nE       assert 'unable to au...dministrator.' == 'dakota marke...successfully.'\nE         \nE         - dakota marketplace account connected successfully.\nE         + unable to authenticate due to permission rights. please contact system administrator.\n\ntests\\Critical_Scenarios_for_Smoke_Testing\\test_contact_record_auto_sync.py:262: AssertionError"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258239924, "stop": 1748258240148}, {"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748258309399, "stop": 1748258309431}], "start": 1748258159701, "stop": 1748258323107, "uuid": "6d9c2351-5f65-456a-b36e-24fa115665fe", "historyId": "1e579f8bf0bb5cf51eb9ee541adb9a12", "testCaseId": "1e579f8bf0bb5cf51eb9ee541adb9a12", "fullName": "tests.Critical_Scenarios_for_Smoke_Testing.test_contact_record_auto_sync#test_contact_record_auto_sync", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "Mapping - Contact field Mapping"}, {"name": "story", "value": "Validate successful mapping of contact fields."}, {"name": "tag", "value": "release_one"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Critical_Scenarios_for_Smoke_Testing"}, {"name": "suite", "value": "test_contact_record_auto_sync"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Critical_Scenarios_for_Smoke_Testing.test_contact_record_auto_sync"}]}