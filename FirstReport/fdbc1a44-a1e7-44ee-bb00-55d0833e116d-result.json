{"name": "test_link_account_preview_popup_marketplace", "status": "passed", "statusDetails": {"message": "AssertionError: Contact not clicked: Insert failed. STRING_TOO_LONG, Marketplace__Dakota_Research_Team_Overview__c] Data value too large.\nassert 'Insert faile...ue too large.' == 'Account successfully linked'\n  \n  - Account successfully linked\n  + Insert failed. STRING_TOO_LONG, Marketplace__Dakota_Research_Team_Overview__c] Data value too large.", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2f8844a2d2a2e2440d675bfaff730cd5\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @pytest.mark.release_three\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Marketplace Search\")\n    @allure.story('Validate the \"Link Account\" button in the preview popup for Marketplace Search and proper linking.')\n    def test_link_account_preview_popup_marketplace(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to the contact search page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Wait for the results to load\n        time.sleep(10)\n    \n        # Select Display Criteria (Linked Account)\n        criteria_dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='DisplayCriteria'])[1]\")))\n        dropdown_option = Select(criteria_dropdown)\n        dropdown_option.select_by_visible_text(\"Unlinked Accounts\")\n        time.sleep(3)\n    \n    \n        # Click the Search button and print its text\n        search_button = wait.until(EC.element_to_be_clickable(\n            (By.XPATH, \"//button[@title='Search']\")\n        ))\n        print(f\"Button Text : {search_button.text}\")\n        search_button.click()\n    \n        # Click on first name\n        first_name = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@name='previewAccount'])[1]\")))\n        print(f\"Account Name : {first_name.text}\")\n        first_name.click()\n    \n        # Verify the \"Link Account\" button on preview popup\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='LinkÂ Account']\")))\n    \n        assert button.text.strip() == \"Link Account\" , f\"Expected button was 'Link Account' but got {button.text}\"\n        time.sleep(1)\n    \n        # Verify the correct linking\n        button.click()\n    \n        # Locate all 'Link' buttons\n        all_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n        # Check if any button is enabled\n        enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n        if not enabled_buttons:  # If all buttons are disabled\n            print(f\"All {len(all_buttons)} 'Link' buttons are disabled. Performing alternative action.\")\n    \n            # search the element\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='SearchBar']\")))\n            btn.clear()\n            btn.send_keys(\"x\")\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_brand'][normalize-space()='Search']\")))\n            btn.click()\n            time.sleep(2)\n    \n    \n            # Locate all 'Link' buttons\n            all_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n            # Check if any button is enabled\n            enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n        else:\n            print(f\"Found {len(enabled_buttons)} enabled 'Link' buttons. Proceeding with normal actions.\")\n            # Add the code to execute when at least one button is enabled here\n    \n        # Click on first enabled button\n        for button in enabled_buttons:\n            driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", button)\n            time.sleep(2)\n            button.click()\n            time.sleep(2)\n    \n            toast_message = WebDriverWait(driver, 30).until(EC.element_to_be_clickable(\n                (By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n            print(f\"Actual Toast Text : {toast_message.text}\")\n    \n            # Take Screenshot & Attach to Allure\n            screenshot = driver.get_screenshot_as_png()\n            allure.attach(screenshot, name=f\"Verification Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n>           assert toast_message.text.strip() == \"Account successfully linked\", f\"Contact not clicked: {toast_message.text}\"\nE           AssertionError: Contact not clicked: Insert failed. STRING_TOO_LONG, Marketplace__Dakota_Research_Team_Overview__c] Data value too large.\nE           assert 'Insert faile...ue too large.' == 'Account successfully linked'\nE             \nE             - Account successfully linked\nE             + Insert failed. STRING_TOO_LONG, Marketplace__Dakota_Research_Team_Overview__c] Data value too large.\n\ntests\\Link_Create_Account_from_Preview_Popup\\test_link_account_preview_popup_marketplace.py:144: AssertionError"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748264723407, "stop": 1748264723454}], "attachments": [{"name": "Verification Screenshot", "source": "f146f956-d172-466f-8bac-3ebcb05cc6d1-attachment.png", "type": "image/png"}], "start": 1748264678535, "stop": 1748264762894, "uuid": "9922e89a-1232-4f1c-8e86-83a8533450c3", "historyId": "6d92f09ceae169d2af07318bd68ea038", "testCaseId": "6d92f09ceae169d2af07318bd68ea038", "fullName": "tests.Link_Create_Account_from_Preview_Popup.test_link_account_preview_popup_marketplace#test_link_account_preview_popup_marketplace", "labels": [{"name": "feature", "value": "Marketplace Search"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Validate the \"Link Account\" button in the preview popup for Marketplace Search and proper linking."}, {"name": "tag", "value": "release_three"}, {"name": "tag", "value": "P1"}, {"name": "tag", "value": "Skipped"}, {"name": "parentSuite", "value": "tests.Link_Create_Account_from_Preview_Popup"}, {"name": "suite", "value": "test_link_account_preview_popup_marketplace"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Link_Create_Account_from_Preview_Popup.test_link_account_preview_popup_marketplace"}]}