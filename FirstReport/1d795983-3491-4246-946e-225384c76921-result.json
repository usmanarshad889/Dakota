{"name": "test_account_creation_upto_1000", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span part=\"indicator\" class=\"slds-checkbox_faux\" lwc-5pi77bcd5ae=\"\"></span> is not clickable at point (45, 586). Other element would receive the click: <article class=\"slds-card MarketplaceAccountSearchTab\" data-aura-rendered-by=\"51:855;a\" data-aura-class=\"MarketplaceAccountSearchTab\">...</article>\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\n\tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\n\t(No symbol) [0x00007FF6C3918F9A]\n\t(No symbol) [0x00007FF6C3977439]\n\t(No symbol) [0x00007FF6C3974DF2]\n\t(No symbol) [0x00007FF6C3971EA1]\n\t(No symbol) [0x00007FF6C3970DA1]\n\t(No symbol) [0x00007FF6C3962394]\n\t(No symbol) [0x00007FF6C399737A]\n\t(No symbol) [0x00007FF6C3961C46]\n\t(No symbol) [0x00007FF6C3997590]\n\t(No symbol) [0x00007FF6C39BF39C]\n\t(No symbol) [0x00007FF6C3997153]\n\t(No symbol) [0x00007FF6C3960421]\n\t(No symbol) [0x00007FF6C39611B3]\n\tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\n\tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\n\tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\n\tGetHandleVerifier [0x00007FF6C3B669FA+180890]\n\tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\n\tGetHandleVerifier [0x00007FF6C3B55274+109332]\n\tGetHandleVerifier [0x00007FF6C3B55422+109762]\n\tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"00fdc39bc96633719b33e78012e5eef1\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mass Actions\")\n    @allure.story(\"Test mass actions for creating accounts for up to 1000 records.\")\n    def test_account_creation_upto_1000(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n    \n        # Navigate to Marketplace Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Print Current Tab\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[@title='Accounts']\")))\n        print(f\"Current Tab : {tab.text}\")\n    \n        button = wait.until(EC.visibility_of_element_located((By.XPATH, \"//button[@title='Search']\")))\n        print(f\"Button Text : {button.text}\")\n        time.sleep(8)\n    \n        # Select linked accounts from filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='DisplayCriteria']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Unlinked Accounts\")\n        time.sleep(1)\n    \n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n        button.click()\n    \n        # Parameters\n        max_records = 1000\n        retry_limit = 3  # How many times to retry if no new records load\n    \n        # Initial wait\n        time.sleep(5)\n    \n        prev_count = 0\n    \n        while True:\n            # Get current loaded account names\n            names = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//tbody/tr/td[2]\")))\n            new_count = len(names)\n            print(f\"Records Loaded: {new_count}\")\n    \n            # Check if max limit reached\n            if new_count >= max_records:\n                print(f\"Reached {max_records} records. Stopping.\")\n                break\n    \n            # Retry checking if new records load\n            retries = 0\n            while retries < retry_limit:\n                # Scroll to last element\n                last_element = names[-1]\n                driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", last_element)\n                ActionChains(driver).move_to_element(last_element).perform()\n    \n                # Wait for new records to load\n                time.sleep(5)\n                names_after_scroll = driver.find_elements(By.XPATH, \"//tbody/tr/td[2]\")\n                updated_count = len(names_after_scroll)\n    \n                if updated_count > new_count:\n                    print(f\"New records loaded: {updated_count}\")\n                    prev_count = updated_count\n                    break  # New records loaded, continue loop\n                else:\n                    retries += 1\n                    print(f\"No new records, retry {retries}/{retry_limit}...\")\n    \n            # If no new records after retries, stop loop\n            if retries == retry_limit:\n                print(\"No more records loading. Stopping.\")\n                break\n    \n        # Optional: Scroll to the top after loading\n        first_element = names[0]\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", first_element)\n        ActionChains(driver).move_to_element(first_element).perform()\n    \n        print(\"All possible records loaded.\")\n        time.sleep(2)\n    \n    \n        # Click on ALL CHECKBOX\n        all_box = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[1]\")))\n>       all_box.click()\n\ntests\\Load_Records_Mass_Actions\\test_account_creation_upto_1000.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A63B060870>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...C3B3BA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF906EBC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span part=\"indicator\" class=\"slds-checkbox_faux\" lwc-5pi77bcd5ae=\"\"></span> is not clickable at point (45, 586). Other element would receive the click: <article class=\"slds-card MarketplaceAccountSearchTab\" data-aura-rendered-by=\"51:855;a\" data-aura-class=\"MarketplaceAccountSearchTab\">...</article>\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\nE       \t(No symbol) [0x00007FF6C3918F9A]\nE       \t(No symbol) [0x00007FF6C3977439]\nE       \t(No symbol) [0x00007FF6C3974DF2]\nE       \t(No symbol) [0x00007FF6C3971EA1]\nE       \t(No symbol) [0x00007FF6C3970DA1]\nE       \t(No symbol) [0x00007FF6C3962394]\nE       \t(No symbol) [0x00007FF6C399737A]\nE       \t(No symbol) [0x00007FF6C3961C46]\nE       \t(No symbol) [0x00007FF6C3997590]\nE       \t(No symbol) [0x00007FF6C39BF39C]\nE       \t(No symbol) [0x00007FF6C3997153]\nE       \t(No symbol) [0x00007FF6C3960421]\nE       \t(No symbol) [0x00007FF6C39611B3]\nE       \tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF6C3B669FA+180890]\nE       \tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF6C3B55274+109332]\nE       \tGetHandleVerifier [0x00007FF6C3B55422+109762]\nE       \tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748266246533, "stop": 1748266247564}], "start": 1748266219930, "stop": 1748266341291, "uuid": "43c79a6c-babb-4b8c-bdcc-4f4052c5b650", "historyId": "89c187c5fa0a6cc0f8ba85fd27d3637a", "testCaseId": "89c187c5fa0a6cc0f8ba85fd27d3637a", "fullName": "tests.Load_Records_Mass_Actions.test_account_creation_upto_1000#test_account_creation_upto_1000", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "Test mass actions for creating accounts for up to 1000 records."}, {"name": "feature", "value": "Mass Actions"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Load_Records_Mass_Actions"}, {"name": "suite", "value": "test_account_creation_upto_1000"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "21108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Load_Records_Mass_Actions.test_account_creation_upto_1000"}]}