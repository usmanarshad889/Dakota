{"uid":"994d6862f96ec6ad","name":"test_data_pushing_standard_fields_contact","fullName":"tests.Push_Data_to_Standard_Fields.test_data_pushing_standard_fields_contact#test_data_pushing_standard_fields_contact","historyId":"1b1188d3f9fbef01e757e879ffa93f68","time":{"start":1745327859353,"stop":1745328162624,"duration":303271},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b99ba16e311692182773489802bff957\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mapping - Contact field Mapping\")\n    @allure.story(\"Validate successful mapping of contact fields.\")\n    def test_data_pushing_standard_fields_contact(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        url = f\"{config['uat_base_url']}lightning/o/Contact/list\"\n        driver.get(url)\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n    \n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(1)\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        retries = 5\n        for attempt in range(retries):\n            try:\n                url = f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\"\n                driver.get(url)\n                break  # Exit the loop if the page loads successfully\n            except TimeoutException:\n                print(f\"Attempt {attempt + 1} failed. Retrying...\")\n                time.sleep(5)  # Wait before retrying\n        else:\n            print(\"All retry attempts failed.\")\n    \n    \n        # Click on Authentication svg button\n        try:\n            # Wait for full page load\n            wait.until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n    \n            element = wait.until(\n                EC.element_to_be_clickable((By.XPATH, \"//li[1]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\"))\n            )\n            element.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Verify the Authentication with correct Credentials\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Username']\"))).clear()\n        driver.find_element(By.XPATH, \"//input[@name='Username']\").send_keys(\"Fuse Upgrade\")\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").send_keys(\"rolus009\")\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").send_keys(\"https://marketplace-dakota-uat.herokuapp.com\")\n        time.sleep(1)\n    \n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Connect']\")))\n            driver.execute_script(\"arguments[0].click();\", btn)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(2)\n    \n        toast = WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        print(f\"Toast message : {toast.text}\")\n    \n        # Verify the Toast message\n        assert toast.text.lower() == \"dakota marketplace account connected successfully.\", f\"Test failed: {toast.text}\"\n        time.sleep(3)\n    \n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[2]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\")))\n        element.click()\n        time.sleep(1)\n    \n    \n        try:\n            # Click on Auto Sync Field Updates\n            inactive_button = driver.find_element(By.XPATH, \"//span[@class='slds-checkbox_off']\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='slds-checkbox_faux']\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n        time.sleep(2)\n    \n    \n        # Switch to contacts mapping\n        contact_fld = wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\")))\n        contact_fld.click()\n        time.sleep(1)\n    \n        # Scroll down by 500 pixels\n        driver.execute_script(\"window.scrollBy(0, 500);\")\n        time.sleep(10)\n    \n    \n        # Select Website with Account Description\n        select_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='a7Ndy0000001H41EAE'])[1]\")))\n        option = Select(select_element)\n        option.select_by_visible_text(\"Email\")\n    \n        # Select phone with CRD\n        select_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='a7Ndy0000001H42EAE'])[1]\")))\n        option = Select(select_element)\n        option.select_by_visible_text(\"Dakota Phone\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[3]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Update\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Sync Option not selected\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[4]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Create Task\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Setting field not selected\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[5]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Owner\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Recipient field not selected\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[6]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Aiman Shakil\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Assignee User/Group not selected\")\n    \n    \n        # Scroll down by 1500 pixels\n        driver.execute_script(\"window.scrollBy(0, 2500);\")\n        time.sleep(1)\n    \n        # Select Save Option\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@id='contacts']//button[@class='slds-button slds-button--brand slds-button--small'][normalize-space()='Save']\")))\n        save_btn.click()\n        time.sleep(1)\n        ok_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='OK']\")))\n        ok_btn.click()\n        time.sleep(15)\n    \n    \n        # Navigate to Market Place Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Define the stopping condition element\n        stopping_condition_locator = (By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n    \n        max_attempts = 5\n        attempts = 0\n    \n        while attempts < max_attempts:\n            # Refresh page and clear cookies\n            driver.refresh()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\"))).click()\n    \n            # Wait for search input and enter the search term\n            name_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\")))\n            name_input.clear()\n            name_input.send_keys(search_name)\n    \n            search_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n    \n            # Double-click search button multiple times until condition is met\n            actions = ActionChains(driver)\n            for _ in range(3):\n                if driver.find_elements(*stopping_condition_locator):\n                    print(\"Stopping condition met. Exiting loop.\")\n                    break\n    \n                actions.double_click(search_element).perform()\n    \n            # If element is found, exit the while loop\n            if driver.find_elements(*stopping_condition_locator):\n                break\n    \n            attempts += 1  # Increment attempt counter\n    \n        # Fail test if maximum attempts reached and condition is not met\n        assert attempts < max_attempts, \"Test failed: Stopping condition not met after 5 attempts\"\n    \n        # Check for checkboxes after exiting loop\n        checkboxes = driver.find_elements(By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n        assert len(checkboxes) > 0, \"Checkbox not found or not visible\"\n        time.sleep(1)\n    \n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small'])[1]\")))\n        new_button.click()\n        time.sleep(1)\n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Link Contact']\")))\n        new_button.click()\n    \n    \n        # Locate all 'Link' buttons\n        all_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n        # Check if any button is enabled\n        enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n        if not enabled_buttons:  # If all buttons are disabled\n            print(f\"All {len(all_buttons)} 'Link' buttons are disabled. Performing alternative action.\")\n    \n            # search the element\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='SearchBar'])\")))\n            btn.clear()\n            btn.send_keys(value_src)\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_brand'][normalize-space()='Search']\")))\n            btn.click()\n            time.sleep(2)\n    \n            # Locate all 'Link' buttons\n>           all_buttons = wait.until(\n                EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n\ntests\\Push_Data_to_Standard_Fields\\test_data_pushing_standard_fields_contact.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b99ba16e311692182773489802bff957\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x00000282C5427CE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1745321010728,"stop":1745321010729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"config","time":{"start":1745321010729,"stop":1745321010730,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1745327857249,"stop":1745327859352,"duration":2103},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b99ba16e311692182773489802bff957\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Mapping - Contact field Mapping\")\n    @allure.story(\"Validate successful mapping of contact fields.\")\n    def test_data_pushing_standard_fields_contact(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        url = f\"{config['uat_base_url']}lightning/o/Contact/list\"\n        driver.get(url)\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n    \n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(1)\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        retries = 5\n        for attempt in range(retries):\n            try:\n                url = f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\"\n                driver.get(url)\n                break  # Exit the loop if the page loads successfully\n            except TimeoutException:\n                print(f\"Attempt {attempt + 1} failed. Retrying...\")\n                time.sleep(5)  # Wait before retrying\n        else:\n            print(\"All retry attempts failed.\")\n    \n    \n        # Click on Authentication svg button\n        try:\n            # Wait for full page load\n            wait.until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n    \n            element = wait.until(\n                EC.element_to_be_clickable((By.XPATH, \"//li[1]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\"))\n            )\n            element.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Verify the Authentication with correct Credentials\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Username']\"))).clear()\n        driver.find_element(By.XPATH, \"//input[@name='Username']\").send_keys(\"Fuse Upgrade\")\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='Password']\").send_keys(\"rolus009\")\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").clear()\n        driver.find_element(By.XPATH, \"//input[@name='AuthorizationURL']\").send_keys(\"https://marketplace-dakota-uat.herokuapp.com\")\n        time.sleep(1)\n    \n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Connect']\")))\n            driver.execute_script(\"arguments[0].click();\", btn)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(2)\n    \n        toast = WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        print(f\"Toast message : {toast.text}\")\n    \n        # Verify the Toast message\n        assert toast.text.lower() == \"dakota marketplace account connected successfully.\", f\"Test failed: {toast.text}\"\n        time.sleep(3)\n    \n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[2]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\")))\n        element.click()\n        time.sleep(1)\n    \n    \n        try:\n            # Click on Auto Sync Field Updates\n            inactive_button = driver.find_element(By.XPATH, \"//span[@class='slds-checkbox_off']\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='slds-checkbox_faux']\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n        time.sleep(2)\n    \n    \n        # Switch to contacts mapping\n        contact_fld = wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\")))\n        contact_fld.click()\n        time.sleep(1)\n    \n        # Scroll down by 500 pixels\n        driver.execute_script(\"window.scrollBy(0, 500);\")\n        time.sleep(10)\n    \n    \n        # Select Website with Account Description\n        select_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='a7Ndy0000001H41EAE'])[1]\")))\n        option = Select(select_element)\n        option.select_by_visible_text(\"Email\")\n    \n        # Select phone with CRD\n        select_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//select[@name='a7Ndy0000001H42EAE'])[1]\")))\n        option = Select(select_element)\n        option.select_by_visible_text(\"Dakota Phone\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[3]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Update\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Sync Option not selected\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[4]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Create Task\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Setting field not selected\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[5]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Owner\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Recipient field not selected\")\n    \n    \n        try:\n            # Select Sync Option\n            xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/ol[1]/li[2]/article[1]/div[1]/div[1]/div[3]/div[1]/div[1]/div[3]/div[2]/div[1]/div[1]/table[1]/tr/td[6]/div[1]/div[1]/div[1]/select[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Aiman Shakil\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Assignee User/Group not selected\")\n    \n    \n        # Scroll down by 1500 pixels\n        driver.execute_script(\"window.scrollBy(0, 2500);\")\n        time.sleep(1)\n    \n        # Select Save Option\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@id='contacts']//button[@class='slds-button slds-button--brand slds-button--small'][normalize-space()='Save']\")))\n        save_btn.click()\n        time.sleep(1)\n        ok_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='OK']\")))\n        ok_btn.click()\n        time.sleep(15)\n    \n    \n        # Navigate to Market Place Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Define the stopping condition element\n        stopping_condition_locator = (By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n    \n        max_attempts = 5\n        attempts = 0\n    \n        while attempts < max_attempts:\n            # Refresh page and clear cookies\n            driver.refresh()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\"))).click()\n    \n            # Wait for search input and enter the search term\n            name_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\")))\n            name_input.clear()\n            name_input.send_keys(search_name)\n    \n            search_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n    \n            # Double-click search button multiple times until condition is met\n            actions = ActionChains(driver)\n            for _ in range(3):\n                if driver.find_elements(*stopping_condition_locator):\n                    print(\"Stopping condition met. Exiting loop.\")\n                    break\n    \n                actions.double_click(search_element).perform()\n    \n            # If element is found, exit the while loop\n            if driver.find_elements(*stopping_condition_locator):\n                break\n    \n            attempts += 1  # Increment attempt counter\n    \n        # Fail test if maximum attempts reached and condition is not met\n        assert attempts < max_attempts, \"Test failed: Stopping condition not met after 5 attempts\"\n    \n        # Check for checkboxes after exiting loop\n        checkboxes = driver.find_elements(By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n        assert len(checkboxes) > 0, \"Checkbox not found or not visible\"\n        time.sleep(1)\n    \n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small'])[1]\")))\n        new_button.click()\n        time.sleep(1)\n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Link Contact']\")))\n        new_button.click()\n    \n    \n        # Locate all 'Link' buttons\n        all_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n        # Check if any button is enabled\n        enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n        if not enabled_buttons:  # If all buttons are disabled\n            print(f\"All {len(all_buttons)} 'Link' buttons are disabled. Performing alternative action.\")\n    \n            # search the element\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='SearchBar'])\")))\n            btn.clear()\n            btn.send_keys(value_src)\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_brand'][normalize-space()='Search']\")))\n            btn.click()\n            time.sleep(2)\n    \n            # Locate all 'Link' buttons\n>           all_buttons = wait.until(\n                EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n\ntests\\Push_Data_to_Standard_Fields\\test_data_pushing_standard_fields_contact.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b99ba16e311692182773489802bff957\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x00000282C5427CE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745327921336,"stop":1745327921351,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745327979607,"stop":1745327979622,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"driver::0","time":{"start":1745328174801,"stop":1745328177213,"duration":2412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Validate successful mapping of contact fields."},{"name":"feature","value":"Mapping - Contact field Mapping"},{"name":"tag","value":"Skipped"},{"name":"parentSuite","value":"tests.Push_Data_to_Standard_Fields"},{"name":"suite","value":"test_data_pushing_standard_fields_contact"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"9988-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Push_Data_to_Standard_Fields.test_data_pushing_standard_fields_contact"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["Skipped"]},"source":"994d6862f96ec6ad.json","parameterValues":[]}