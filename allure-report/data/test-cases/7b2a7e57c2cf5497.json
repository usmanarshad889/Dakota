{"uid":"7b2a7e57c2cf5497","name":"test_non_admin_user_permission_set","fullName":"tests.Permission_Sets.test_non_admin_user_permission_set#test_non_admin_user_permission_set","historyId":"ef5078ecd8237283511b24e6e53d9a3b","time":{"start":1745404329932,"stop":1745404389548,"duration":59616},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E3411F55+78133]\n\tGetHandleVerifier [0x00007FF6E3411FB0+78224]\n\t(No symbol) [0x00007FF6E31D91BA]\n\t(No symbol) [0x00007FF6E31EF504]\n\t(No symbol) [0x00007FF6E31EDFD3]\n\t(No symbol) [0x00007FF6E31E1809]\n\t(No symbol) [0x00007FF6E31E1983]\n\t(No symbol) [0x00007FF6E31DF68F]\n\t(No symbol) [0x00007FF6E31E3E81]\n\t(No symbol) [0x00007FF6E328041B]\n\t(No symbol) [0x00007FF6E325715A]\n\t(No symbol) [0x00007FF6E327F21F]\n\t(No symbol) [0x00007FF6E3256F33]\n\t(No symbol) [0x00007FF6E3220358]\n\t(No symbol) [0x00007FF6E32210C3]\n\tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\n\tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\n\tGetHandleVerifier [0x00007FF6E36F497D+3103581]\n\tGetHandleVerifier [0x00007FF6E342C7EA+186826]\n\tGetHandleVerifier [0x00007FF6E34343FF+218591]\n\tGetHandleVerifier [0x00007FF6E3419D94+110452]\n\tGetHandleVerifier [0x00007FF6E3419F42+110882]\n\tGetHandleVerifier [0x00007FF6E3400379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c64e0982c478da6272cb74a08260ee60\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Permission Sets\")\n    @allure.story(\"Validate permission set assignment for non-admin users.\")\n    def test_non_admin_user_permission_set(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to installed package Page\n        package_url = f\"{config['base_url']}lightning/setup/ManageUsers/home\"\n        driver.get(package_url)\n    \n    \n        # Locate and switch to the iframe\n        iframe_element = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//iframe[contains(@title, 'Salesforce - Enterprise Edition')]\")))\n        driver.switch_to.frame(iframe_element)\n        time.sleep(1)\n    \n    \n        # Select Active Users in the dropdown\n        dropdown_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='fcf']\")))\n        options = Select(dropdown_field)\n        options.select_by_visible_text(\"Active Users\")\n    \n        # Locate All Active Users\n        xpath = '''/html[1]/body[1]/div[5]/div[1]/form[1]/div[2]/table[1]/tbody[1]/tr/th[1]/a[1]'''\n        all_users = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n    \n        # Locate 'Shakil, Aiman' user in for loop\n        for user in all_users:\n            user_text = user.text.strip()\n>           driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", user)\n\ntests\\Permission_Sets\\test_non_admin_user_permission_set.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002799735E530>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...E3400379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E3411F55+78133]\nE       \tGetHandleVerifier [0x00007FF6E3411FB0+78224]\nE       \t(No symbol) [0x00007FF6E31D91BA]\nE       \t(No symbol) [0x00007FF6E31EF504]\nE       \t(No symbol) [0x00007FF6E31EDFD3]\nE       \t(No symbol) [0x00007FF6E31E1809]\nE       \t(No symbol) [0x00007FF6E31E1983]\nE       \t(No symbol) [0x00007FF6E31DF68F]\nE       \t(No symbol) [0x00007FF6E31E3E81]\nE       \t(No symbol) [0x00007FF6E328041B]\nE       \t(No symbol) [0x00007FF6E325715A]\nE       \t(No symbol) [0x00007FF6E327F21F]\nE       \t(No symbol) [0x00007FF6E3256F33]\nE       \t(No symbol) [0x00007FF6E3220358]\nE       \t(No symbol) [0x00007FF6E32210C3]\nE       \tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\nE       \tGetHandleVerifier [0x00007FF6E36F497D+3103581]\nE       \tGetHandleVerifier [0x00007FF6E342C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF6E34343FF+218591]\nE       \tGetHandleVerifier [0x00007FF6E3419D94+110452]\nE       \tGetHandleVerifier [0x00007FF6E3419F42+110882]\nE       \tGetHandleVerifier [0x00007FF6E3400379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1745400377639,"stop":1745400377640,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"config","time":{"start":1745400377640,"stop":1745400377640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1745404328466,"stop":1745404329932,"duration":1466},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E3411F55+78133]\n\tGetHandleVerifier [0x00007FF6E3411FB0+78224]\n\t(No symbol) [0x00007FF6E31D91BA]\n\t(No symbol) [0x00007FF6E31EF504]\n\t(No symbol) [0x00007FF6E31EDFD3]\n\t(No symbol) [0x00007FF6E31E1809]\n\t(No symbol) [0x00007FF6E31E1983]\n\t(No symbol) [0x00007FF6E31DF68F]\n\t(No symbol) [0x00007FF6E31E3E81]\n\t(No symbol) [0x00007FF6E328041B]\n\t(No symbol) [0x00007FF6E325715A]\n\t(No symbol) [0x00007FF6E327F21F]\n\t(No symbol) [0x00007FF6E3256F33]\n\t(No symbol) [0x00007FF6E3220358]\n\t(No symbol) [0x00007FF6E32210C3]\n\tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\n\tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\n\tGetHandleVerifier [0x00007FF6E36F497D+3103581]\n\tGetHandleVerifier [0x00007FF6E342C7EA+186826]\n\tGetHandleVerifier [0x00007FF6E34343FF+218591]\n\tGetHandleVerifier [0x00007FF6E3419D94+110452]\n\tGetHandleVerifier [0x00007FF6E3419F42+110882]\n\tGetHandleVerifier [0x00007FF6E3400379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c64e0982c478da6272cb74a08260ee60\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Permission Sets\")\n    @allure.story(\"Validate permission set assignment for non-admin users.\")\n    def test_non_admin_user_permission_set(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to installed package Page\n        package_url = f\"{config['base_url']}lightning/setup/ManageUsers/home\"\n        driver.get(package_url)\n    \n    \n        # Locate and switch to the iframe\n        iframe_element = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//iframe[contains(@title, 'Salesforce - Enterprise Edition')]\")))\n        driver.switch_to.frame(iframe_element)\n        time.sleep(1)\n    \n    \n        # Select Active Users in the dropdown\n        dropdown_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='fcf']\")))\n        options = Select(dropdown_field)\n        options.select_by_visible_text(\"Active Users\")\n    \n        # Locate All Active Users\n        xpath = '''/html[1]/body[1]/div[5]/div[1]/form[1]/div[2]/table[1]/tbody[1]/tr/th[1]/a[1]'''\n        all_users = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n    \n        # Locate 'Shakil, Aiman' user in for loop\n        for user in all_users:\n            user_text = user.text.strip()\n>           driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", user)\n\ntests\\Permission_Sets\\test_non_admin_user_permission_set.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002799735E530>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...E3400379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E3411F55+78133]\nE       \tGetHandleVerifier [0x00007FF6E3411FB0+78224]\nE       \t(No symbol) [0x00007FF6E31D91BA]\nE       \t(No symbol) [0x00007FF6E31EF504]\nE       \t(No symbol) [0x00007FF6E31EDFD3]\nE       \t(No symbol) [0x00007FF6E31E1809]\nE       \t(No symbol) [0x00007FF6E31E1983]\nE       \t(No symbol) [0x00007FF6E31DF68F]\nE       \t(No symbol) [0x00007FF6E31E3E81]\nE       \t(No symbol) [0x00007FF6E328041B]\nE       \t(No symbol) [0x00007FF6E325715A]\nE       \t(No symbol) [0x00007FF6E327F21F]\nE       \t(No symbol) [0x00007FF6E3256F33]\nE       \t(No symbol) [0x00007FF6E3220358]\nE       \t(No symbol) [0x00007FF6E32210C3]\nE       \tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\nE       \tGetHandleVerifier [0x00007FF6E36F497D+3103581]\nE       \tGetHandleVerifier [0x00007FF6E342C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF6E34343FF+218591]\nE       \tGetHandleVerifier [0x00007FF6E3419D94+110452]\nE       \tGetHandleVerifier [0x00007FF6E3419F42+110882]\nE       \tGetHandleVerifier [0x00007FF6E3400379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745404367142,"stop":1745404367920,"duration":778},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1745404393638,"stop":1745404395983,"duration":2345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Permission Sets"},{"name":"severity","value":"critical"},{"name":"story","value":"Validate permission set assignment for non-admin users."},{"name":"tag","value":"Skipped"},{"name":"parentSuite","value":"tests.Permission_Sets"},{"name":"suite","value":"test_non_admin_user_permission_set"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"9800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Permission_Sets.test_non_admin_user_permission_set"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"cfc928f5ed233db1","status":"passed","time":{"start":1745326312513,"stop":1745326417469,"duration":104956}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"adfce531c8a6ed5b","reportUrl":"http://localhost:9090/job/SF%20APP%20Automation/26/allure/#testresult/adfce531c8a6ed5b","status":"passed","time":{"start":1745326312513,"stop":1745326417469,"duration":104956}},{"uid":"9cb7294b7a222682","reportUrl":"http://localhost:9090/job/SF%20APP%20Automation/24/allure/#testresult/9cb7294b7a222682","status":"passed","time":{"start":1745326312513,"stop":1745326417469,"duration":104956}}]},"tags":["Skipped"]},"source":"7b2a7e57c2cf5497.json","parameterValues":[]}