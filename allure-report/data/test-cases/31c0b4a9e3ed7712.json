{"uid":"31c0b4a9e3ed7712","name":"test_metro_area_account_creation","fullName":"tests.Metro_Area.test_metro_area_account_creation#test_metro_area_account_creation","historyId":"77720eeb8c855f468734053c20a23790","time":{"start":1745325219706,"stop":1745325368461,"duration":148755},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (199, 878)\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A770D9]\n\t(No symbol) [0x00007FF7C5A74A92]\n\t(No symbol) [0x00007FF7C5A71B31]\n\t(No symbol) [0x00007FF7C5A70A31]\n\t(No symbol) [0x00007FF7C5A62164]\n\t(No symbol) [0x00007FF7C5A9715A]\n\t(No symbol) [0x00007FF7C5A61A16]\n\t(No symbol) [0x00007FF7C5A97370]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"15af68ba65b429fff3ce340749b23777\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Account Creation\")\n    @allure.story(\"Verify the correct creation of account in Metro Area.\")\n    def test_metro_area_account_creation(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n    \n        # Navigate to the contact search page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Metro_Areas\")\n    \n        # Wait for elements to present\n        try:\n            btn = wait.until(EC.presence_of_element_located((By.XPATH, \"//tbody/tr[1]/th[1]/lightning-primitive-cell-factory[1]/span[1]\")))\n            print(btn.text)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        time.sleep(2)\n    \n        # Wait for all links under \"Metro Area Name\"\n        all_names = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//th[@data-label='Metro Area Name']//a\")))\n    \n        # Loop through metro area and find \"Boston\"\n        for name in all_names:\n            if name.text.strip() == \"Boston\":\n                ActionChains(driver).move_to_element(name).click().perform()\n                print(\"Clicked on Boston link\")\n                time.sleep(5)  # Allow time for page to load\n                break\n        else:\n            print(\"Boston link not found\")\n    \n    \n        # Get all open tab handles\n        tabs = driver.window_handles\n        print(f\"Total open tabs: {len(tabs)}\")\n    \n        # Switch to the second tab (index 1)\n        if len(tabs) > 1:\n            driver.switch_to.window(tabs[1])\n            print(f\"Switched to second tab: {driver.title}\")\n        else:\n            print(\"Only one tab is open, cannot switch.\")\n    \n        # Wait for elements to present\n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//p[@class='videoMsgStyling']\")))\n            print(btn.text)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        time.sleep(2)\n    \n        # Scroll down 3000 pixels\n        driver.execute_script(\"window.scrollBy(0, 3000);\")\n        time.sleep(2)\n    \n        # Sroll to All account button and click on it\n        element = wait.until(EC.presence_of_element_located((By.XPATH, \"//span[normalize-space()='All Accounts']\")))\n        # Scroll to the element\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(1)\n        element.click()\n    \n        # Wait for elements to present\n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[1]/td[1]\")))\n            print(btn.text)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        time.sleep(2)\n    \n    \n        # Get all accounts\n        accounts = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@name='accountClicked'])\")))\n    \n        for index in range(1, len(accounts) + 1):\n            # Check if the icon exists for this row\n            icon_xpath = f\"//tbody/tr[{index}]/th[1]/lightning-primitive-cell-factory[1]/span[1]/div[1]/lightning-icon[1]\"\n            icon = driver.find_elements(By.XPATH, icon_xpath)\n    \n            if not icon:  # If no icon is found\n                account_name = accounts[index - 1].text  # Get the account name\n                print(f\"Account without link icon: {account_name} (Row {index})\")\n    \n                # Get the account button element\n                account_xpath = f\"(//button[@name='accountClicked'])[{index}]\"\n                account_button = wait.until(EC.element_to_be_clickable((By.XPATH, account_xpath)))\n    \n                # Scroll to the account button\n                driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", account_button)\n                time.sleep(3)  # Wait for smooth scrolling\n    \n                # Click on the account\n>               account_button.click()\n\ntests\\Metro_Area\\test_metro_area_account_creation.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000282C546B390>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...C5C40379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (199, 878)\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A770D9]\nE       \t(No symbol) [0x00007FF7C5A74A92]\nE       \t(No symbol) [0x00007FF7C5A71B31]\nE       \t(No symbol) [0x00007FF7C5A70A31]\nE       \t(No symbol) [0x00007FF7C5A62164]\nE       \t(No symbol) [0x00007FF7C5A9715A]\nE       \t(No symbol) [0x00007FF7C5A61A16]\nE       \t(No symbol) [0x00007FF7C5A97370]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1745321010728,"stop":1745321010729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"config","time":{"start":1745321010729,"stop":1745321010730,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1745325218141,"stop":1745325219706,"duration":1565},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (199, 878)\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A770D9]\n\t(No symbol) [0x00007FF7C5A74A92]\n\t(No symbol) [0x00007FF7C5A71B31]\n\t(No symbol) [0x00007FF7C5A70A31]\n\t(No symbol) [0x00007FF7C5A62164]\n\t(No symbol) [0x00007FF7C5A9715A]\n\t(No symbol) [0x00007FF7C5A61A16]\n\t(No symbol) [0x00007FF7C5A97370]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"15af68ba65b429fff3ce340749b23777\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Account Creation\")\n    @allure.story(\"Verify the correct creation of account in Metro Area.\")\n    def test_metro_area_account_creation(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n    \n        # Navigate to the contact search page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Metro_Areas\")\n    \n        # Wait for elements to present\n        try:\n            btn = wait.until(EC.presence_of_element_located((By.XPATH, \"//tbody/tr[1]/th[1]/lightning-primitive-cell-factory[1]/span[1]\")))\n            print(btn.text)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        time.sleep(2)\n    \n        # Wait for all links under \"Metro Area Name\"\n        all_names = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//th[@data-label='Metro Area Name']//a\")))\n    \n        # Loop through metro area and find \"Boston\"\n        for name in all_names:\n            if name.text.strip() == \"Boston\":\n                ActionChains(driver).move_to_element(name).click().perform()\n                print(\"Clicked on Boston link\")\n                time.sleep(5)  # Allow time for page to load\n                break\n        else:\n            print(\"Boston link not found\")\n    \n    \n        # Get all open tab handles\n        tabs = driver.window_handles\n        print(f\"Total open tabs: {len(tabs)}\")\n    \n        # Switch to the second tab (index 1)\n        if len(tabs) > 1:\n            driver.switch_to.window(tabs[1])\n            print(f\"Switched to second tab: {driver.title}\")\n        else:\n            print(\"Only one tab is open, cannot switch.\")\n    \n        # Wait for elements to present\n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//p[@class='videoMsgStyling']\")))\n            print(btn.text)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        time.sleep(2)\n    \n        # Scroll down 3000 pixels\n        driver.execute_script(\"window.scrollBy(0, 3000);\")\n        time.sleep(2)\n    \n        # Sroll to All account button and click on it\n        element = wait.until(EC.presence_of_element_located((By.XPATH, \"//span[normalize-space()='All Accounts']\")))\n        # Scroll to the element\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(1)\n        element.click()\n    \n        # Wait for elements to present\n        try:\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[1]/td[1]\")))\n            print(btn.text)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n        time.sleep(2)\n    \n    \n        # Get all accounts\n        accounts = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@name='accountClicked'])\")))\n    \n        for index in range(1, len(accounts) + 1):\n            # Check if the icon exists for this row\n            icon_xpath = f\"//tbody/tr[{index}]/th[1]/lightning-primitive-cell-factory[1]/span[1]/div[1]/lightning-icon[1]\"\n            icon = driver.find_elements(By.XPATH, icon_xpath)\n    \n            if not icon:  # If no icon is found\n                account_name = accounts[index - 1].text  # Get the account name\n                print(f\"Account without link icon: {account_name} (Row {index})\")\n    \n                # Get the account button element\n                account_xpath = f\"(//button[@name='accountClicked'])[{index}]\"\n                account_button = wait.until(EC.element_to_be_clickable((By.XPATH, account_xpath)))\n    \n                # Scroll to the account button\n                driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", account_button)\n                time.sleep(3)  # Wait for smooth scrolling\n    \n                # Click on the account\n>               account_button.click()\n\ntests\\Metro_Area\\test_metro_area_account_creation.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000282C546B390>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...C5C40379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (199, 878)\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A770D9]\nE       \t(No symbol) [0x00007FF7C5A74A92]\nE       \t(No symbol) [0x00007FF7C5A71B31]\nE       \t(No symbol) [0x00007FF7C5A70A31]\nE       \t(No symbol) [0x00007FF7C5A62164]\nE       \t(No symbol) [0x00007FF7C5A9715A]\nE       \t(No symbol) [0x00007FF7C5A61A16]\nE       \t(No symbol) [0x00007FF7C5A97370]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745325265988,"stop":1745325266018,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1745325368495,"stop":1745325370995,"duration":2500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"Account Creation"},{"name":"story","value":"Verify the correct creation of account in Metro Area."},{"name":"tag","value":"P1"},{"name":"tag","value":"Skipped"},{"name":"parentSuite","value":"tests.Metro_Area"},{"name":"suite","value":"test_metro_area_account_creation"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"9988-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Metro_Area.test_metro_area_account_creation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["P1","Skipped"]},"source":"31c0b4a9e3ed7712.json","parameterValues":[]}