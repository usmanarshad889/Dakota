{"uid":"66b5d8122ce188a2","name":"test_contact_linking_using_button","fullName":"tests.Link_with_Dakota_Marketplace.test_contact_linking_using_button#test_contact_linking_using_button","historyId":"2ac021bc263d638620c15629e0d96ede","time":{"start":1745402046732,"stop":1745402121456,"duration":74724},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E3411F55+78133]\n\tGetHandleVerifier [0x00007FF6E3411FB0+78224]\n\t(No symbol) [0x00007FF6E31D8FEC]\n\t(No symbol) [0x00007FF6E3230654]\n\t(No symbol) [0x00007FF6E3222164]\n\t(No symbol) [0x00007FF6E325715A]\n\t(No symbol) [0x00007FF6E3221A16]\n\t(No symbol) [0x00007FF6E3257370]\n\t(No symbol) [0x00007FF6E327F21F]\n\t(No symbol) [0x00007FF6E3256F33]\n\t(No symbol) [0x00007FF6E3220358]\n\t(No symbol) [0x00007FF6E32210C3]\n\tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\n\tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\n\tGetHandleVerifier [0x00007FF6E36F497D+3103581]\n\tGetHandleVerifier [0x00007FF6E342C7EA+186826]\n\tGetHandleVerifier [0x00007FF6E34343FF+218591]\n\tGetHandleVerifier [0x00007FF6E3419D94+110452]\n\tGetHandleVerifier [0x00007FF6E3419F42+110882]\n\tGetHandleVerifier [0x00007FF6E3400379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a16d68168be2e3825dc1a1adce2c949\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Contact Linking\")\n    @allure.story(\"Test linking Salesforce Contacts with Dakota Marketplace contacts using the button.\")\n    def test_contact_linking_using_button(driver, config):\n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to SF App Account TAB\n        driver.get(f\"{config['base_url']}lightning/o/Contact/list?filterName=__Recent\")\n    \n    \n        # Click on New Button for account creation\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(1)\n        button.click()\n    \n    \n        # Click on New Button\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(1)\n        button.click()\n    \n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        time.sleep(2)\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n>       dropdown_option.click()\n\ntests\\Link_with_Dakota_Marketplace\\test_contact_linking_using_button.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027995B19450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...E3400379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E3411F55+78133]\nE       \tGetHandleVerifier [0x00007FF6E3411FB0+78224]\nE       \t(No symbol) [0x00007FF6E31D8FEC]\nE       \t(No symbol) [0x00007FF6E3230654]\nE       \t(No symbol) [0x00007FF6E3222164]\nE       \t(No symbol) [0x00007FF6E325715A]\nE       \t(No symbol) [0x00007FF6E3221A16]\nE       \t(No symbol) [0x00007FF6E3257370]\nE       \t(No symbol) [0x00007FF6E327F21F]\nE       \t(No symbol) [0x00007FF6E3256F33]\nE       \t(No symbol) [0x00007FF6E3220358]\nE       \t(No symbol) [0x00007FF6E32210C3]\nE       \tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\nE       \tGetHandleVerifier [0x00007FF6E36F497D+3103581]\nE       \tGetHandleVerifier [0x00007FF6E342C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF6E34343FF+218591]\nE       \tGetHandleVerifier [0x00007FF6E3419D94+110452]\nE       \tGetHandleVerifier [0x00007FF6E3419F42+110882]\nE       \tGetHandleVerifier [0x00007FF6E3400379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1745400377639,"stop":1745400377640,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"config","time":{"start":1745400377640,"stop":1745400377640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1745401984673,"stop":1745402046731,"duration":62058},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E3411F55+78133]\n\tGetHandleVerifier [0x00007FF6E3411FB0+78224]\n\t(No symbol) [0x00007FF6E31D8FEC]\n\t(No symbol) [0x00007FF6E3230654]\n\t(No symbol) [0x00007FF6E3222164]\n\t(No symbol) [0x00007FF6E325715A]\n\t(No symbol) [0x00007FF6E3221A16]\n\t(No symbol) [0x00007FF6E3257370]\n\t(No symbol) [0x00007FF6E327F21F]\n\t(No symbol) [0x00007FF6E3256F33]\n\t(No symbol) [0x00007FF6E3220358]\n\t(No symbol) [0x00007FF6E32210C3]\n\tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\n\tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\n\tGetHandleVerifier [0x00007FF6E36F497D+3103581]\n\tGetHandleVerifier [0x00007FF6E342C7EA+186826]\n\tGetHandleVerifier [0x00007FF6E34343FF+218591]\n\tGetHandleVerifier [0x00007FF6E3419D94+110452]\n\tGetHandleVerifier [0x00007FF6E3419F42+110882]\n\tGetHandleVerifier [0x00007FF6E3400379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a16d68168be2e3825dc1a1adce2c949\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Contact Linking\")\n    @allure.story(\"Test linking Salesforce Contacts with Dakota Marketplace contacts using the button.\")\n    def test_contact_linking_using_button(driver, config):\n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to SF App Account TAB\n        driver.get(f\"{config['base_url']}lightning/o/Contact/list?filterName=__Recent\")\n    \n    \n        # Click on New Button for account creation\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(1)\n        button.click()\n    \n    \n        # Click on New Button\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(1)\n        button.click()\n    \n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        time.sleep(2)\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n>       dropdown_option.click()\n\ntests\\Link_with_Dakota_Marketplace\\test_contact_linking_using_button.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027995B19450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...E3400379+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCA72114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E3411F55+78133]\nE       \tGetHandleVerifier [0x00007FF6E3411FB0+78224]\nE       \t(No symbol) [0x00007FF6E31D8FEC]\nE       \t(No symbol) [0x00007FF6E3230654]\nE       \t(No symbol) [0x00007FF6E3222164]\nE       \t(No symbol) [0x00007FF6E325715A]\nE       \t(No symbol) [0x00007FF6E3221A16]\nE       \t(No symbol) [0x00007FF6E3257370]\nE       \t(No symbol) [0x00007FF6E327F21F]\nE       \t(No symbol) [0x00007FF6E3256F33]\nE       \t(No symbol) [0x00007FF6E3220358]\nE       \t(No symbol) [0x00007FF6E32210C3]\nE       \tGetHandleVerifier [0x00007FF6E36DBA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF6E36D5E72+2977874]\nE       \tGetHandleVerifier [0x00007FF6E36F497D+3103581]\nE       \tGetHandleVerifier [0x00007FF6E342C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF6E34343FF+218591]\nE       \tGetHandleVerifier [0x00007FF6E3419D94+110452]\nE       \tGetHandleVerifier [0x00007FF6E3419F42+110882]\nE       \tGetHandleVerifier [0x00007FF6E3400379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745402100282,"stop":1745402100332,"duration":50},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1745402121510,"stop":1745402123982,"duration":2472},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Test linking Salesforce Contacts with Dakota Marketplace contacts using the button."},{"name":"feature","value":"Contact Linking"},{"name":"tag","value":"P1"},{"name":"tag","value":"Skipped"},{"name":"parentSuite","value":"tests.Link_with_Dakota_Marketplace"},{"name":"suite","value":"test_contact_linking_using_button"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"9800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Link_with_Dakota_Marketplace.test_contact_linking_using_button"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"a2f7a04a29937eb3","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","time":{"start":1745323773474,"stop":1745323939796,"duration":166322}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"e25726bc1271712e","reportUrl":"http://localhost:9090/job/SF%20APP%20Automation/26/allure/#testresult/e25726bc1271712e","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","time":{"start":1745323773474,"stop":1745323939796,"duration":166322}},{"uid":"4d7398bf78f240c0","reportUrl":"http://localhost:9090/job/SF%20APP%20Automation/24/allure/#testresult/4d7398bf78f240c0","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","time":{"start":1745323773474,"stop":1745323939796,"duration":166322}}]},"tags":["P1","Skipped"]},"source":"66b5d8122ce188a2.json","parameterValues":[]}