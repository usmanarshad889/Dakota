{"uid":"4ca72691cf5554a1","name":"test_follow_account_notification","fullName":"tests.Follow_Notification_Email.test_follow_account_notification#test_follow_account_notification","historyId":"62366b78d66b8f1538e14468412b0ff2","time":{"start":1745321894786,"stop":1745322126406,"duration":231620},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"392aa764f26c549a80bf496d82209c03\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Followed Accounts Notifications\")\n    @allure.story(\"Validate email notifications sent on updates to followed accounts.\")\n    def test_follow_account_notification(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Navigate to installed packages setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\")\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[3]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\")))\n        element.click()\n        time.sleep(1)\n    \n        # Scroll down by 500 pixels\n        driver.execute_script(\"window.scrollBy(0, 800);\")\n        time.sleep(7)\n    \n    \n        try:\n            # Sync Account/Contact Type Field\n            inactive_button = driver.find_element(By.XPATH, \"(//span[@class='slds-checkbox_off'])[1]\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[1]\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(\"Sync Account/Contact Type toggle button is not working\")\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        try:\n            # Receive Follow Notification\n            inactive_button = driver.find_element(By.XPATH, \"(//span[@class='slds-checkbox_off'])[4]\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[4]\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(\"Receive Follow Notification toggle button is not working\")\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        try:\n            # Notification Setting\n            xpath = '''(//select[@name='a7Fdy0000003GkzEAE'])[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Send Email\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Setting not selected\")\n    \n    \n        try:\n            # Notification Recipient\n            xpath = '''(//select[@name='a7Fdy0000003GkzEAE'])[2]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"User\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Recipient not selected\")\n    \n    \n        try:\n            # Notification Assignee User/Group\n            input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Select a value..']\")))\n            input_field.click()\n            input_field_value = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Filter values..']\")))\n            input_field_value.send_keys(\"Aiman Shakil\")\n            option = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@title='Aiman Shakil']\")))\n            option.click()\n            input_field.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Assignee User/Group not selected\")\n    \n    \n        # Select Save Option\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Save']\")))\n        save_btn.click()\n        time.sleep(2)\n    \n        toast_message = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        text = toast_message.text\n        print(f\"Actual Toast message : {text}\")\n    \n        assert text in [\"Mapping saved successfully.\", \"Status changed successfully!\"], f\"Unexpected toast message: {text}\"\n        time.sleep(2)\n    \n    \n        # Navigate to Marketplace Setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Print Current Tab\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[@title='Accounts']\")))\n        print(f\"Current Tab : {tab.text}\")\n    \n        button = wait.until(EC.visibility_of_element_located((By.XPATH, \"//button[@title='Search']\")))\n        print(f\"Button Text : {button.text}\")\n        time.sleep(8)\n    \n        # Select linked accounts from filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='DisplayCriteria']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Linked Accounts\")\n    \n    \n        # Select Marketplace Created Date filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='CRMCreatedDate']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Last 30 Days\")\n    \n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Account Name']\")))\n        name_field.send_keys(\"Test\")\n        time.sleep(1)\n    \n        # Click on Search Button\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n        button.click()\n    \n        # Wait until all account buttons are present\n        accounts = WebDriverWait(driver, 30).until(\n            EC.presence_of_all_elements_located((By.XPATH, \"//button[@name='previewAccount']\"))\n        )\n    \n        account_name = None\n        # Check if accounts were found\n        if accounts:\n            # Randomly pick one account from the list\n            random_account = random.choice(accounts)\n    \n            # Scroll to the selected account\n            driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", random_account)\n            time.sleep(1)\n    \n            # Store the account name (optional: add a small wait if text loads dynamically)\n            account_name = random_account.text.strip()\n            print(f\"Selected Account Name: {account_name}\")\n    \n            # Click on the account using ActionChains (or JS click if needed)\n            ActionChains(driver).move_to_element(random_account).click().perform()\n    \n        else:\n            print(\"No accounts found.\")\n    \n    \n        # Get all window handles (list of tabs)\n        tabs = driver.window_handles\n        print(\"Open tabs:\", len(tabs))  # Print number of tabs\n    \n    \n        # Switch to the second tab (index 1)\n        driver.switch_to.window(tabs[1])\n        time.sleep(5)\n    \n    \n        # Verify by printing the current page title\n        print(\"Switched to Tab - Title:\", driver.title)\n    \n    \n        # Scroll down by 300 pixels\n        xpath = '''(//span[@class='test-id__field-label'][normalize-space()='Account Owner'])[1]'''\n        element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", element)\n        time.sleep(2)\n    \n    \n        # Check if account is already followed\n        following_buttons = driver.find_elements(By.XPATH, \"//button[@title='Following']\")\n    \n        if following_buttons:\n            print(\"Account is already followed. No action needed.\")\n            # Assert that the \"Following\" button is visible (sanity check)\n            assert following_buttons[0].is_displayed(), \"Following button is not visible as expected.\"\n        else:\n            # Click on 'Follow' button to follow the account\n            follow_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Follow']\")))\n            follow_button.click()\n            print(\"Clicked on 'Follow' button to follow the account.\")\n    \n            # Verify the account is now followed\n            followed = wait.until(EC.presence_of_element_located((By.XPATH, \"//button[@title='Following']\")))\n            assert followed.is_displayed(), \"Failed to follow the account!\"\n            print(\"Verified account is now followed.\")\n    \n        # Optional: small wait if necessary\n        time.sleep(2)\n    \n    \n        # --------------   Change Field   -----------------\n        # Navigate to UAT Marketplace Environment\n        driver.get(config[\"uat_login_url\"])\n        wait = WebDriverWait(driver, 20)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n        time.sleep(4)\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Account button\n        try:\n            xpath_uat = '''//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.standard-Account']'''\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, xpath_uat)))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n    \n        try:\n            # Navigate to Market Place Setup\n            driver.get(f\"{config['uat_base_url']}lightning/o/Account/list?filterName=All_Accounts_Private_Fund\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        src_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Account-search-input']\")))\n        src_button.send_keys(account_name)\n        load_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@title,'Refresh')]//lightning-primitive-icon[contains(@exportparts,'icon')]\")))\n        load_button.click()\n        time.sleep(10)\n    \n        # Edit the Account\n>       edit_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small']//lightning-primitive-icon[@variant='bare']\")))\n\ntests\\Follow_Notification_Email\\test_follow_account_notification.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"392aa764f26c549a80bf496d82209c03\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000282C4FA2DE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A6F19D]\nE       \t(No symbol) [0x00007FF7C5A6F44C]\nE       \t(No symbol) [0x00007FF7C5AC23D7]\nE       \t(No symbol) [0x00007FF7C5A9719F]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1745321010728,"stop":1745321010729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"config","time":{"start":1745321010729,"stop":1745321010730,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1745321893060,"stop":1745321894786,"duration":1726},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"392aa764f26c549a80bf496d82209c03\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @pytest.mark.P1\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Followed Accounts Notifications\")\n    @allure.story(\"Validate email notifications sent on updates to followed accounts.\")\n    def test_follow_account_notification(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.Marketplace__Dakota_Search']\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Navigate to installed packages setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Setup\")\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[3]//article[1]//div[1]//div[1]//div[1]//button[1]//lightning-primitive-icon[1]\")))\n        element.click()\n        time.sleep(1)\n    \n        # Scroll down by 500 pixels\n        driver.execute_script(\"window.scrollBy(0, 800);\")\n        time.sleep(7)\n    \n    \n        try:\n            # Sync Account/Contact Type Field\n            inactive_button = driver.find_element(By.XPATH, \"(//span[@class='slds-checkbox_off'])[1]\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[1]\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(\"Sync Account/Contact Type toggle button is not working\")\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        try:\n            # Receive Follow Notification\n            inactive_button = driver.find_element(By.XPATH, \"(//span[@class='slds-checkbox_off'])[4]\")\n            if inactive_button.text == \"Inactive\":\n                btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox_faux'])[4]\")))\n                btn.click()\n            else:\n                print(\"Button is already active\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(\"Receive Follow Notification toggle button is not working\")\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        try:\n            # Notification Setting\n            xpath = '''(//select[@name='a7Fdy0000003GkzEAE'])[1]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"Send Email\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Setting not selected\")\n    \n    \n        try:\n            # Notification Recipient\n            xpath = '''(//select[@name='a7Fdy0000003GkzEAE'])[2]'''\n            select_element = driver.find_elements(By.XPATH, xpath)\n            for element in select_element:\n                if element.is_enabled():\n                    select = Select(element)\n                    select.select_by_visible_text(\"User\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Recipient not selected\")\n    \n    \n        try:\n            # Notification Assignee User/Group\n            input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Select a value..']\")))\n            input_field.click()\n            input_field_value = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Filter values..']\")))\n            input_field_value.send_keys(\"Aiman Shakil\")\n            option = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@title='Aiman Shakil']\")))\n            option.click()\n            input_field.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n            print(\"Notification Assignee User/Group not selected\")\n    \n    \n        # Select Save Option\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Save']\")))\n        save_btn.click()\n        time.sleep(2)\n    \n        toast_message = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n        text = toast_message.text\n        print(f\"Actual Toast message : {text}\")\n    \n        assert text in [\"Mapping saved successfully.\", \"Status changed successfully!\"], f\"Unexpected toast message: {text}\"\n        time.sleep(2)\n    \n    \n        # Navigate to Marketplace Setup\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Print Current Tab\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//li[@title='Accounts']\")))\n        print(f\"Current Tab : {tab.text}\")\n    \n        button = wait.until(EC.visibility_of_element_located((By.XPATH, \"//button[@title='Search']\")))\n        print(f\"Button Text : {button.text}\")\n        time.sleep(8)\n    \n        # Select linked accounts from filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='DisplayCriteria']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Linked Accounts\")\n    \n    \n        # Select Marketplace Created Date filter\n        dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, \"//select[@name='CRMCreatedDate']\")))\n        dropdown_option = Select(dropdown)\n        dropdown_option.select_by_visible_text(\"Last 30 Days\")\n    \n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Account Name']\")))\n        name_field.send_keys(\"Test\")\n        time.sleep(1)\n    \n        # Click on Search Button\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n        button.click()\n    \n        # Wait until all account buttons are present\n        accounts = WebDriverWait(driver, 30).until(\n            EC.presence_of_all_elements_located((By.XPATH, \"//button[@name='previewAccount']\"))\n        )\n    \n        account_name = None\n        # Check if accounts were found\n        if accounts:\n            # Randomly pick one account from the list\n            random_account = random.choice(accounts)\n    \n            # Scroll to the selected account\n            driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", random_account)\n            time.sleep(1)\n    \n            # Store the account name (optional: add a small wait if text loads dynamically)\n            account_name = random_account.text.strip()\n            print(f\"Selected Account Name: {account_name}\")\n    \n            # Click on the account using ActionChains (or JS click if needed)\n            ActionChains(driver).move_to_element(random_account).click().perform()\n    \n        else:\n            print(\"No accounts found.\")\n    \n    \n        # Get all window handles (list of tabs)\n        tabs = driver.window_handles\n        print(\"Open tabs:\", len(tabs))  # Print number of tabs\n    \n    \n        # Switch to the second tab (index 1)\n        driver.switch_to.window(tabs[1])\n        time.sleep(5)\n    \n    \n        # Verify by printing the current page title\n        print(\"Switched to Tab - Title:\", driver.title)\n    \n    \n        # Scroll down by 300 pixels\n        xpath = '''(//span[@class='test-id__field-label'][normalize-space()='Account Owner'])[1]'''\n        element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", element)\n        time.sleep(2)\n    \n    \n        # Check if account is already followed\n        following_buttons = driver.find_elements(By.XPATH, \"//button[@title='Following']\")\n    \n        if following_buttons:\n            print(\"Account is already followed. No action needed.\")\n            # Assert that the \"Following\" button is visible (sanity check)\n            assert following_buttons[0].is_displayed(), \"Following button is not visible as expected.\"\n        else:\n            # Click on 'Follow' button to follow the account\n            follow_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Follow']\")))\n            follow_button.click()\n            print(\"Clicked on 'Follow' button to follow the account.\")\n    \n            # Verify the account is now followed\n            followed = wait.until(EC.presence_of_element_located((By.XPATH, \"//button[@title='Following']\")))\n            assert followed.is_displayed(), \"Failed to follow the account!\"\n            print(\"Verified account is now followed.\")\n    \n        # Optional: small wait if necessary\n        time.sleep(2)\n    \n    \n        # --------------   Change Field   -----------------\n        # Navigate to UAT Marketplace Environment\n        driver.get(config[\"uat_login_url\"])\n        wait = WebDriverWait(driver, 20)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n        time.sleep(4)\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Click on Account button\n        try:\n            xpath_uat = '''//one-app-nav-bar-item-root[@data-target-selection-name='sfdc:TabDefinition.standard-Account']'''\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, xpath_uat)))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n    \n        try:\n            # Navigate to Market Place Setup\n            driver.get(f\"{config['uat_base_url']}lightning/o/Account/list?filterName=All_Accounts_Private_Fund\")\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Error: {type(e).__name__}\")\n    \n    \n        src_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Account-search-input']\")))\n        src_button.send_keys(account_name)\n        load_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@title,'Refresh')]//lightning-primitive-icon[contains(@exportparts,'icon')]\")))\n        load_button.click()\n        time.sleep(10)\n    \n        # Edit the Account\n>       edit_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small']//lightning-primitive-icon[@variant='bare']\")))\n\ntests\\Follow_Notification_Email\\test_follow_account_notification.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"392aa764f26c549a80bf496d82209c03\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000282C4FA2DE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A6F19D]\nE       \t(No symbol) [0x00007FF7C5A6F44C]\nE       \t(No symbol) [0x00007FF7C5AC23D7]\nE       \t(No symbol) [0x00007FF7C5A9719F]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745321927646,"stop":1745321927679,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745322074586,"stop":1745322083338,"duration":8752},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":2},"afterStages":[{"name":"driver::0","time":{"start":1745322139108,"stop":1745322141729,"duration":2621},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"Validate email notifications sent on updates to followed accounts."},{"name":"severity","value":"critical"},{"name":"feature","value":"Followed Accounts Notifications"},{"name":"tag","value":"P1"},{"name":"tag","value":"Skipped"},{"name":"parentSuite","value":"tests.Follow_Notification_Email"},{"name":"suite","value":"test_follow_account_notification"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"9988-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Follow_Notification_Email.test_follow_account_notification"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["P1","Skipped"]},"source":"4ca72691cf5554a1.json","parameterValues":[]}