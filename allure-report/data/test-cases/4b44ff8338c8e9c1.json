{"uid":"4b44ff8338c8e9c1","name":"test_create_contact_linking_unlinking","fullName":"tests.Single_Record_Actions_Contact.test_single_record_contact_linking_unlinking#test_create_contact_linking_unlinking","historyId":"850c613c394de2233e35a67790d76963","time":{"start":1742990551174,"stop":1742990750316,"duration":199142},"status":"failed","statusMessage":"AssertionError: Contact not clicked: Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]\nassert 'Update faile...: [Last Name]' == 'Contact succ...ully unlinked'\n  \n  - Contact successfully unlinked\n  + Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"279878b95d368f281b1887fb0bbea8f4\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.Skipped\n    @pytest.mark.release_two\n    @pytest.mark.release_three\n    def test_create_contact_linking_unlinking(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        url = f\"{config['uat_base_url']}lightning/o/Contact/list\"\n        driver.get(url)\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n    \n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(1)\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[5]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to Market Place Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Define the stopping condition element\n        stopping_condition_locator = (By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n    \n        max_attempts = 5\n        attempts = 0\n    \n        while attempts < max_attempts:\n            # Refresh page and clear cookies\n            driver.refresh()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\"))).click()\n    \n            # Wait for search input and enter the search term\n            name_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\")))\n            name_input.clear()\n            name_input.send_keys(search_name)\n    \n            search_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n    \n            # Double-click search button multiple times until condition is met\n            actions = ActionChains(driver)\n            for _ in range(3):\n                if driver.find_elements(*stopping_condition_locator):\n                    print(\"Stopping condition met. Exiting loop.\")\n                    break\n    \n                actions.double_click(search_element).perform()\n    \n            # If element is found, exit the while loop\n            if driver.find_elements(*stopping_condition_locator):\n                break\n    \n            attempts += 1  # Increment attempt counter\n    \n        # Fail test if maximum attempts reached and condition is not met\n        assert attempts < max_attempts, \"Test failed: Stopping condition not met after 5 attempts\"\n    \n        # Check for checkboxes after exiting loop\n        checkboxes = driver.find_elements(By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n        assert len(checkboxes) > 0, \"Checkbox not found or not visible\"\n        time.sleep(1)\n    \n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small'])[1]\")))\n        new_button.click()\n        time.sleep(1)\n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Link Contact']\")))\n        new_button.click()\n    \n    \n        # Locate all 'Link' buttons\n        all_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n        # Check if any button is enabled\n        enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n        if not enabled_buttons:  # If all buttons are disabled\n            print(f\"All {len(all_buttons)} 'Link' buttons are disabled. Performing alternative action.\")\n    \n            # search the element\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='SearchBar'])\")))\n            btn.clear()\n            btn.send_keys(\"x\")\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_brand'][normalize-space()='Search']\")))\n            btn.click()\n            time.sleep(2)\n    \n            # Locate all 'Link' buttons\n            all_buttons = wait.until(\n                EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n            # Check if any button is enabled\n            enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n            if not enabled_buttons:  # If all buttons are disabled\n                pytest.skip(\"No Account found ... Skipping Testcase\")\n    \n        else:\n            print(f\"Found {len(enabled_buttons)} enabled 'Link' buttons. Proceeding with normal actions.\")\n            # Add the code to execute when at least one button is enabled here\n    \n        # Click on first enabled button\n        for button in enabled_buttons:\n            driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", button)\n            time.sleep(2)\n            button.click()\n            time.sleep(2)\n    \n            toast_message = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n            print(f\"Actual Toast Text : {toast_message.text}\")\n    \n            assert toast_message.text.strip() == \"Contact successfully linked\", f\"Contact not clicked: {toast_message.text}\"\n            break  # Stop after clicking the first enabled button\n    \n        for r in range(1, 3):\n            try:\n                cancel_btn = wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, f\"(//lightning-primitive-icon[@size='small']//*[name()='svg'])[{r}]\")))\n                cancel_btn.click()\n                print(f\"Clicked on cancel button {r}\")\n                break  # Exit loop after the first successful click\n            except (NoSuchElementException, TimeoutException) as e:\n                print(f\"Error: {type(e).__name__} while trying button {r}\")\n        time.sleep(3)\n    \n    \n        # Search by name\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\"))).clear()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\"))).send_keys(search_name)\n        time.sleep(5)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n        btn.click()\n    \n        # Unlink that account\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small'])[1]\"))).click()\n        time.sleep(1)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Unlink Contact']\"))).click()\n        time.sleep(1)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Unlink']\"))).click()\n        time.sleep(1)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Yes']\"))).click()\n        time.sleep(2)\n    \n        toast_message = WebDriverWait(driver, 30).until(EC.element_to_be_clickable(\n            (By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        print(f\"Actual Toast Text : {toast_message.text}\")\n    \n>       assert toast_message.text.strip() == \"Contact successfully unlinked\", f\"Contact not clicked: {toast_message.text}\"\nE       AssertionError: Contact not clicked: Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]\nE       assert 'Update faile...: [Last Name]' == 'Contact succ...ully unlinked'\nE         \nE         - Contact successfully unlinked\nE         + Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]\n\ntests\\Single_Record_Actions_Contact\\test_single_record_contact_linking_unlinking.py:325: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1742988736001,"stop":1742988736002,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"config","time":{"start":1742988736002,"stop":1742988736002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1742990500286,"stop":1742990551173,"duration":50887},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Contact not clicked: Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]\nassert 'Update faile...: [Last Name]' == 'Contact succ...ully unlinked'\n  \n  - Contact successfully unlinked\n  + Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"279878b95d368f281b1887fb0bbea8f4\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.Skipped\n    @pytest.mark.release_two\n    @pytest.mark.release_three\n    def test_create_contact_linking_unlinking(driver, config):\n        driver.get(config[\"uat_login_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"uat_username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"uat_password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Move to account Tab and click on new button\n        url = f\"{config['uat_base_url']}lightning/o/Contact/list\"\n        driver.get(url)\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@title='New']\")))\n        time.sleep(2)\n        new_button.click()\n        time.sleep(2)\n    \n        # Select a record type\n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_neutral slds-button slds-button_brand uiButton']\")))\n        time.sleep(2)\n        new_button.click()\n    \n        # Select account name\n        name_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Phone']\")))\n        name_field.send_keys(phone)\n    \n        # Select phone\n        field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='MobilePhone']\")))\n        field.send_keys(mobile)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='city']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='LinkedIn_URL__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='GHIN__c']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n        time.sleep(1)\n    \n        # SELECT Account type\n        input_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Search Accounts...']\")))\n        input_field.clear()\n        input_field.send_keys(\"Test Contacts\")\n        dropdown_option = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@role='option'])[2]\")))\n        dropdown_option.click()\n    \n        # Select account name\n        salutation_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='salutation']\")))\n        salutation_field.click()\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Mr.']\")))\n        btn.click()\n    \n        # Select First name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='firstName']\")))\n        btn.send_keys(\"Test\")\n        # driver.find_element(By.XPATH, \"//input[@name='middleName']\").send_keys(middle_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='lastName']\")))\n        btn.send_keys(last_name)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='suffix']\")))\n        btn.send_keys(suffix)\n    \n        element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n        time.sleep(2)\n    \n        for r in range(1, 101):  # XPath indices start from 1\n            try:\n                element = driver.find_element(By.XPATH, f\"(//input[@name='Marketplace_Verified_Contact__c'])[{r}]\")\n                element.click()\n                print(f\"Clicked element {r}\")\n                break  # Stop after the first successful click\n            except NoSuchElementException:\n                print(f\"Element {r} not found, trying next...\")\n    \n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Email']\"))).send_keys(email)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='Title']\"))).send_keys(title)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-label='Contact Type']\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='Administrator']\"))).click()\n    \n        # click on save button\n        save_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='SaveEdit']\")))\n        save_btn.click()\n    \n        time.sleep(2)\n    \n        # Verify toast_message\n        toast = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        toast_massage = toast.text\n        print(f\"Actual Toast : {toast_massage}\")\n    \n        assert \"was created\" in toast_massage.lower().strip() , f\"Error while creating contact : {toast_massage}\"\n        time.sleep(1)\n    \n    \n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[5]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to Market Place Search\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Define the stopping condition element\n        stopping_condition_locator = (By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n    \n        max_attempts = 5\n        attempts = 0\n    \n        while attempts < max_attempts:\n            # Refresh page and clear cookies\n            driver.refresh()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Contacts']\"))).click()\n    \n            # Wait for search input and enter the search term\n            name_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\")))\n            name_input.clear()\n            name_input.send_keys(search_name)\n    \n            search_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n    \n            # Double-click search button multiple times until condition is met\n            actions = ActionChains(driver)\n            for _ in range(3):\n                if driver.find_elements(*stopping_condition_locator):\n                    print(\"Stopping condition met. Exiting loop.\")\n                    break\n    \n                actions.double_click(search_element).perform()\n    \n            # If element is found, exit the while loop\n            if driver.find_elements(*stopping_condition_locator):\n                break\n    \n            attempts += 1  # Increment attempt counter\n    \n        # Fail test if maximum attempts reached and condition is not met\n        assert attempts < max_attempts, \"Test failed: Stopping condition not met after 5 attempts\"\n    \n        # Check for checkboxes after exiting loop\n        checkboxes = driver.find_elements(By.XPATH, \"(//span[@class='slds-checkbox_faux'])[2]\")\n        assert len(checkboxes) > 0, \"Checkbox not found or not visible\"\n        time.sleep(1)\n    \n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small'])[1]\")))\n        new_button.click()\n        time.sleep(1)\n    \n        new_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Link Contact']\")))\n        new_button.click()\n    \n    \n        # Locate all 'Link' buttons\n        all_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n        # Check if any button is enabled\n        enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n        if not enabled_buttons:  # If all buttons are disabled\n            print(f\"All {len(all_buttons)} 'Link' buttons are disabled. Performing alternative action.\")\n    \n            # search the element\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='SearchBar'])\")))\n            btn.clear()\n            btn.send_keys(\"x\")\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='slds-button slds-button_brand'][normalize-space()='Search']\")))\n            btn.click()\n            time.sleep(2)\n    \n            # Locate all 'Link' buttons\n            all_buttons = wait.until(\n                EC.presence_of_all_elements_located((By.XPATH, \"(//button[@title='Link'][normalize-space()='Link'])\")))\n    \n            # Check if any button is enabled\n            enabled_buttons = [button for button in all_buttons if button.is_enabled()]\n    \n            if not enabled_buttons:  # If all buttons are disabled\n                pytest.skip(\"No Account found ... Skipping Testcase\")\n    \n        else:\n            print(f\"Found {len(enabled_buttons)} enabled 'Link' buttons. Proceeding with normal actions.\")\n            # Add the code to execute when at least one button is enabled here\n    \n        # Click on first enabled button\n        for button in enabled_buttons:\n            driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", button)\n            time.sleep(2)\n            button.click()\n            time.sleep(2)\n    \n            toast_message = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n            print(f\"Actual Toast Text : {toast_message.text}\")\n    \n            assert toast_message.text.strip() == \"Contact successfully linked\", f\"Contact not clicked: {toast_message.text}\"\n            break  # Stop after clicking the first enabled button\n    \n        for r in range(1, 3):\n            try:\n                cancel_btn = wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, f\"(//lightning-primitive-icon[@size='small']//*[name()='svg'])[{r}]\")))\n                cancel_btn.click()\n                print(f\"Clicked on cancel button {r}\")\n                break  # Exit loop after the first successful click\n            except (NoSuchElementException, TimeoutException) as e:\n                print(f\"Error: {type(e).__name__} while trying button {r}\")\n        time.sleep(3)\n    \n    \n        # Search by name\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\"))).clear()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@name='searchTerm'])[2]\"))).send_keys(search_name)\n        time.sleep(5)\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='buttonDiv']//button[@title='Search'][normalize-space()='Search']\")))\n        btn.click()\n    \n        # Unlink that account\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@class='slds-button slds-button_icon-border slds-button_icon-x-small'])[1]\"))).click()\n        time.sleep(1)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Unlink Contact']\"))).click()\n        time.sleep(1)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Unlink']\"))).click()\n        time.sleep(1)\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Yes']\"))).click()\n        time.sleep(2)\n    \n        toast_message = WebDriverWait(driver, 30).until(EC.element_to_be_clickable(\n            (By.XPATH, \"//span[@class='toastMessage slds-text-heading--small forceActionsText']\")))\n        print(f\"Actual Toast Text : {toast_message.text}\")\n    \n>       assert toast_message.text.strip() == \"Contact successfully unlinked\", f\"Contact not clicked: {toast_message.text}\"\nE       AssertionError: Contact not clicked: Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]\nE       assert 'Update faile...: [Last Name]' == 'Contact succ...ully unlinked'\nE         \nE         - Contact successfully unlinked\nE         + Update failed. First exception on row 0 with id 0037z00000awIXxAAM; first error: REQUIRED_FIELD_MISSING, Required fields are missing: [Last Name]: [Last Name]\n\ntests\\Single_Record_Actions_Contact\\test_single_record_contact_linking_unlinking.py:325: AssertionError","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1742990582192,"stop":1742990582207,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"Waiting for Document Ready State to be Complete","time":{"start":1742990646478,"stop":1742990651784,"duration":5306},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":2,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1742990750331,"stop":1742990752979,"duration":2648},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"release_three"},{"name":"tag","value":"release_two"},{"name":"tag","value":"Skipped"},{"name":"tag","value":"P1"},{"name":"parentSuite","value":"tests.Single_Record_Actions_Contact"},{"name":"suite","value":"test_single_record_contact_linking_unlinking"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"6312-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Single_Record_Actions_Contact.test_single_record_contact_linking_unlinking"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["P1","Skipped","release_three","release_two"]},"source":"4b44ff8338c8e9c1.json","parameterValues":[]}