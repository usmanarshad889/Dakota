{"uid":"5d3f4820e203db43","name":"test_search_aum","fullName":"tests.Search_Functionality_Account.test_search_functionality_account_AUM_range#test_search_aum","historyId":"58952c7637431559cc2d9b8d531c02bc","time":{"start":1742989231056,"stop":1742989292965,"duration":61909},"status":"broken","statusMessage":"UnicodeEncodeError: 'charmap' codec can't encode character '\\u2705' in position 0: character maps to <undefined>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c286c85e58f92f314f105dbda6ed3b6\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_three\n    def test_search_aum(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[5]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to the contact search page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Select the Contacts tab and print its text\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Accounts']\")))\n        print(f\"Current Tab : {tab.text}\")\n    \n        # Wait for the results to load\n        time.sleep(8)\n    \n    \n        # Select AUM \"From\" value\n        aum_from_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='FROM']\")))\n        aum_from_input.send_keys(\"1\")\n    \n        # Select AUM \"To\" value\n        aum_to_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='To']\")))\n        aum_to_input.send_keys(\"10000\")\n        # aum_to_input.send_keys(\"9999\")\n    \n    \n        # Click the Search button and print its text\n        search_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n        print(f\"Button Text: {search_button.text.strip()}\")\n        search_button.click()\n    \n        # Extract all AUM values from the table\n        aum_results = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//lightning-datatable//tbody/tr/td[3]\")))\n    \n        # Assert that at least one AUM is found\n        assert aum_results, \"❌ No AUM Range found in the search results!\"\n    \n        # Verify that AUM values are within the expected range (1 to 10,000)\n        for aum in aum_results:\n            aum_text = aum.text.strip().replace(\"$\", \"\").replace(\",\", \"\")  # Clean text (remove \"$\" and \",\")\n    \n            assert aum_text.isdigit(), f\"❌ Invalid AUM format: '{aum_text}'\"\n    \n            aum_value = int(aum_text)\n>           print(f\"✅ AUM Value: {aum_value}\")\n\ntests\\Search_Functionality_Account\\test_search_functionality_account_AUM_range.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <encodings.cp1252.IncrementalEncoder object at 0x000001B995674AD0>\ninput = '✅ AUM Value: 10000', final = False\n\n    def encode(self, input, final=False):\n>       return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nE       UnicodeEncodeError: 'charmap' codec can't encode character '\\u2705' in position 0: character maps to <undefined>\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\encodings\\cp1252.py:19: UnicodeEncodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1742988736001,"stop":1742988736002,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"config","time":{"start":1742988736002,"stop":1742988736002,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1742989229478,"stop":1742989231055,"duration":1577},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"UnicodeEncodeError: 'charmap' codec can't encode character '\\u2705' in position 0: character maps to <undefined>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c286c85e58f92f314f105dbda6ed3b6\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_three\n    def test_search_aum(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[5]\"))).click()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to the contact search page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n    \n        # Select the Contacts tab and print its text\n        tab = wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[@data-label='Accounts']\")))\n        print(f\"Current Tab : {tab.text}\")\n    \n        # Wait for the results to load\n        time.sleep(8)\n    \n    \n        # Select AUM \"From\" value\n        aum_from_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='FROM']\")))\n        aum_from_input.send_keys(\"1\")\n    \n        # Select AUM \"To\" value\n        aum_to_input = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='To']\")))\n        aum_to_input.send_keys(\"10000\")\n        # aum_to_input.send_keys(\"9999\")\n    \n    \n        # Click the Search button and print its text\n        search_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@title='Search']\")))\n        print(f\"Button Text: {search_button.text.strip()}\")\n        search_button.click()\n    \n        # Extract all AUM values from the table\n        aum_results = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//lightning-datatable//tbody/tr/td[3]\")))\n    \n        # Assert that at least one AUM is found\n        assert aum_results, \"❌ No AUM Range found in the search results!\"\n    \n        # Verify that AUM values are within the expected range (1 to 10,000)\n        for aum in aum_results:\n            aum_text = aum.text.strip().replace(\"$\", \"\").replace(\",\", \"\")  # Clean text (remove \"$\" and \",\")\n    \n            assert aum_text.isdigit(), f\"❌ Invalid AUM format: '{aum_text}'\"\n    \n            aum_value = int(aum_text)\n>           print(f\"✅ AUM Value: {aum_value}\")\n\ntests\\Search_Functionality_Account\\test_search_functionality_account_AUM_range.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <encodings.cp1252.IncrementalEncoder object at 0x000001B995674AD0>\ninput = '✅ AUM Value: 10000', final = False\n\n    def encode(self, input, final=False):\n>       return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nE       UnicodeEncodeError: 'charmap' codec can't encode character '\\u2705' in position 0: character maps to <undefined>\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\encodings\\cp1252.py:19: UnicodeEncodeError","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1742989261713,"stop":1742989261734,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":1,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1742989309622,"stop":1742989311965,"duration":2343},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"release_three"},{"name":"tag","value":"P1"},{"name":"parentSuite","value":"tests.Search_Functionality_Account"},{"name":"suite","value":"test_search_functionality_account_AUM_range"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"6312-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Search_Functionality_Account.test_search_functionality_account_AUM_range"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["P1","release_three"]},"source":"5d3f4820e203db43.json","parameterValues":[]}