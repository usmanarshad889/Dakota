{"uid":"2c6e227176faf789","name":"test_permission_set_admin","fullName":"tests.Permission_Sets.test_permission_set_access_admin#test_permission_set_admin","historyId":"ffb8d1eb9156472c3586fc6fc9d227da","time":{"start":1745404508533,"stop":1745404588788,"duration":80255},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c2a6b8998a7d9ae2c2c2af850887a672\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Permission Sets\")\n    @allure.story(\"Ensure permission sets Admin restrict or grant access as expected.\")\n    def test_permission_set_admin(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to installed package Page\n        package_url = f\"{config['base_url']}lightning/setup/PermSets/home\"\n        driver.get(package_url)\n    \n        # Verify page title\n        try:\n            expected_title = \"Lightning Experience\"\n            actual_title = driver.title\n            assert actual_title == expected_title, f\"Page title mismatch: Expected '{expected_title}', but got '{actual_title}'\"\n        except Exception as e:\n            pytest.fail(f\"Title Verification Failed: {e}\")\n    \n        try:\n            # Locate and switch to the iframe\n            iframe_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//iframe[@title='Permission Sets ~ Salesforce - Enterprise Edition']\")))\n            driver.switch_to.frame(iframe_element)\n            time.sleep(1)\n            print(f\"Successfully switched to {iframe_element.text} iframe\")\n        except Exception as e:\n            print(str(e).split(\":\")[0])\n    \n        try:\n            # Verify the Admin User Permission Set presence ?\n            xpath = '''/html[1]/body[1]/div[3]/div[1]/form[1]/div[3]/div[4]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div/table/tbody/tr/td[4]/div/a/span'''\n            all_permission = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n            permission_found = False\n    \n            for permission in all_permission:\n                if permission.text.strip() == \"Dakota Marketplace Admin\":\n                    print(f\"{permission.text} is present\")\n                    permission.click()\n                    permission_found = True\n                    break\n    \n            if not permission_found:\n                print(\"Test case failed due to absence of 'Dakota Marketplace Admin' permission\")\n                driver.quit()\n        except Exception as e:\n            print(str(e).split(\":\")[0])\n            driver.quit()\n    \n        # Switched out of iframe\n        driver.switch_to.default_content()\n        time.sleep(1)\n    \n    \n        try:\n            # Switch to iframe\n            iframe_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//iframe[@title='Permission Set: Dakota Marketplace Admin ~ Salesforce - Enterprise Edition']\")))\n            driver.switch_to.frame(iframe_element)\n            time.sleep(1)\n            print(f\"Successfully switched to {iframe_element.text} iframe\")\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        try:\n            # Click on Manage Assignment button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='page:console:pc_form:button_manage_assignments']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n        # Switched out of iframe\n        driver.switch_to.default_content()\n        time.sleep(1)\n    \n        try:\n            # Click on Add Assignment button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Add Assignment']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        try:\n            # Store the current username\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='uiImage'])[1]\")))\n            btn.click()\n            profile_name = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//a[@class='profile-link-label'])[1]\"))).text\n            driver.find_element(By.XPATH, \"//button[@title='Close']//lightning-primitive-icon[@variant='bare']\").click()\n    \n            # Enter and Search the UserName\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='User-search-input']\")))\n            btn.send_keys(profile_name)\n            driver.find_element(By.XPATH, \"//button[@title='Refresh']//lightning-primitive-icon[@exportparts='icon']\").click()\n            time.sleep(5)\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n    \n        try:\n            # Add Searched user and click on NEXT button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox--faux slds-checkbox_faux'])[2]\")))\n            btn.click()\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Next']\")))\n            btn.click()\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Assign']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        # Verify the Result\n        status = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-formatted-text[@class='slds-m-left_x-small']\")))\n        expected_status = \"Success\"\n        actual_status = status.text\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Done']\").click()\n    \n        # Take Screenshot & Attach to Allure\n        screenshot = driver.get_screenshot_as_png()\n        allure.attach(screenshot, name=f\"Verification Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n        if actual_status == expected_status:\n            print(f\"Status Detail: {actual_status}\")\n            assert True\n        else:\n            print(f\"Status Detail: {actual_status}\")\n>           assert False\nE           assert False\n\ntests\\Permission_Sets\\test_permission_set_access_admin.py:180: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1745400377639,"stop":1745400377640,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"config","time":{"start":1745400377640,"stop":1745400377640,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1745404506936,"stop":1745404508532,"duration":1596},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c2a6b8998a7d9ae2c2c2af850887a672\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Permission Sets\")\n    @allure.story(\"Ensure permission sets Admin restrict or grant access as expected.\")\n    def test_permission_set_admin(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to installed package Page\n        package_url = f\"{config['base_url']}lightning/setup/PermSets/home\"\n        driver.get(package_url)\n    \n        # Verify page title\n        try:\n            expected_title = \"Lightning Experience\"\n            actual_title = driver.title\n            assert actual_title == expected_title, f\"Page title mismatch: Expected '{expected_title}', but got '{actual_title}'\"\n        except Exception as e:\n            pytest.fail(f\"Title Verification Failed: {e}\")\n    \n        try:\n            # Locate and switch to the iframe\n            iframe_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//iframe[@title='Permission Sets ~ Salesforce - Enterprise Edition']\")))\n            driver.switch_to.frame(iframe_element)\n            time.sleep(1)\n            print(f\"Successfully switched to {iframe_element.text} iframe\")\n        except Exception as e:\n            print(str(e).split(\":\")[0])\n    \n        try:\n            # Verify the Admin User Permission Set presence ?\n            xpath = '''/html[1]/body[1]/div[3]/div[1]/form[1]/div[3]/div[4]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div/table/tbody/tr/td[4]/div/a/span'''\n            all_permission = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n            permission_found = False\n    \n            for permission in all_permission:\n                if permission.text.strip() == \"Dakota Marketplace Admin\":\n                    print(f\"{permission.text} is present\")\n                    permission.click()\n                    permission_found = True\n                    break\n    \n            if not permission_found:\n                print(\"Test case failed due to absence of 'Dakota Marketplace Admin' permission\")\n                driver.quit()\n        except Exception as e:\n            print(str(e).split(\":\")[0])\n            driver.quit()\n    \n        # Switched out of iframe\n        driver.switch_to.default_content()\n        time.sleep(1)\n    \n    \n        try:\n            # Switch to iframe\n            iframe_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//iframe[@title='Permission Set: Dakota Marketplace Admin ~ Salesforce - Enterprise Edition']\")))\n            driver.switch_to.frame(iframe_element)\n            time.sleep(1)\n            print(f\"Successfully switched to {iframe_element.text} iframe\")\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        try:\n            # Click on Manage Assignment button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='page:console:pc_form:button_manage_assignments']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n        # Switched out of iframe\n        driver.switch_to.default_content()\n        time.sleep(1)\n    \n        try:\n            # Click on Add Assignment button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Add Assignment']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        try:\n            # Store the current username\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='uiImage'])[1]\")))\n            btn.click()\n            profile_name = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//a[@class='profile-link-label'])[1]\"))).text\n            driver.find_element(By.XPATH, \"//button[@title='Close']//lightning-primitive-icon[@variant='bare']\").click()\n    \n            # Enter and Search the UserName\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='User-search-input']\")))\n            btn.send_keys(profile_name)\n            driver.find_element(By.XPATH, \"//button[@title='Refresh']//lightning-primitive-icon[@exportparts='icon']\").click()\n            time.sleep(5)\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n    \n        try:\n            # Add Searched user and click on NEXT button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox--faux slds-checkbox_faux'])[2]\")))\n            btn.click()\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Next']\")))\n            btn.click()\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Assign']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        # Verify the Result\n        status = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-formatted-text[@class='slds-m-left_x-small']\")))\n        expected_status = \"Success\"\n        actual_status = status.text\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Done']\").click()\n    \n        # Take Screenshot & Attach to Allure\n        screenshot = driver.get_screenshot_as_png()\n        allure.attach(screenshot, name=f\"Verification Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n        if actual_status == expected_status:\n            print(f\"Status Detail: {actual_status}\")\n            assert True\n        else:\n            print(f\"Status Detail: {actual_status}\")\n>           assert False\nE           assert False\n\ntests\\Permission_Sets\\test_permission_set_access_admin.py:180: AssertionError","steps":[{"name":"Waiting for Document Ready State to be Complete","time":{"start":1745404535212,"stop":1745404535301,"duration":89},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"attachments":[{"uid":"85e6b8990dbe0064","name":"Verification Screenshot","source":"85e6b8990dbe0064.png","type":"image/png","size":175895}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1745404592848,"stop":1745404595160,"duration":2312},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Permission Sets"},{"name":"severity","value":"critical"},{"name":"story","value":"Ensure permission sets Admin restrict or grant access as expected."},{"name":"tag","value":"Skipped"},{"name":"parentSuite","value":"tests.Permission_Sets"},{"name":"suite","value":"test_permission_set_access_admin"},{"name":"host","value":"RT-LT-597"},{"name":"thread","value":"9800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Permission_Sets.test_permission_set_access_admin"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"943f09069b8d95a4","status":"passed","time":{"start":1745326578541,"stop":1745326734966,"duration":156425}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"3cc61f8d3242bf44","reportUrl":"http://localhost:9090/job/SF%20APP%20Automation/26/allure/#testresult/3cc61f8d3242bf44","status":"passed","time":{"start":1745326578541,"stop":1745326734966,"duration":156425}},{"uid":"9cc1446ac794c9ce","reportUrl":"http://localhost:9090/job/SF%20APP%20Automation/24/allure/#testresult/9cc1446ac794c9ce","status":"passed","time":{"start":1745326578541,"stop":1745326734966,"duration":156425}}]},"tags":["Skipped"]},"source":"2c6e227176faf789.json","parameterValues":[]}