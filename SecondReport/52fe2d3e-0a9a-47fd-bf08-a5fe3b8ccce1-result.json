{"name": "test_member_comment_linking_account", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF7C5C51F55+78133]\n\tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\n\t(No symbol) [0x00007FF7C5A191BA]\n\t(No symbol) [0x00007FF7C5A6F19D]\n\t(No symbol) [0x00007FF7C5A6F44C]\n\t(No symbol) [0x00007FF7C5AC23D7]\n\t(No symbol) [0x00007FF7C5A9719F]\n\t(No symbol) [0x00007FF7C5ABF21F]\n\t(No symbol) [0x00007FF7C5A96F33]\n\t(No symbol) [0x00007FF7C5A60358]\n\t(No symbol) [0x00007FF7C5A610C3]\n\tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\n\tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\n\tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\n\tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\n\tGetHandleVerifier [0x00007FF7C5C743FF+218591]\n\tGetHandleVerifier [0x00007FF7C5C59D94+110452]\n\tGetHandleVerifier [0x00007FF7C5C59F42+110882]\n\tGetHandleVerifier [0x00007FF7C5C40379+5465]\n\tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\n\tRtlUserThreadStart [0x00007FFCA72114FC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"23ce8afceb5a24bfd3f531564ed4523e\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_two\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Dakota Home Tab - Ask Dakota, Link Account\")\n    @allure.story(\"Test creation of contacts directly from member comment\")\n    def test_member_comment_linking_account(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n        # Navigate to Dakota Home Page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Home\")\n    \n        # Print Section name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='title-div'][normalize-space()='Ask Dakota']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", btn)\n        time.sleep(1)\n        print(f\"Section Name : {btn.text}\")\n    \n        # Click on View all button\n        view_all = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//a[contains(text(),'View All')])[2]\")))\n        view_all.click()\n    \n        # Wait for records display\n        try:\n            WebDriverWait(driver, 20).until(EC.presence_of_all_elements_located((By.XPATH, \"(//td[@data-label='Last Updated Date'])[1]\")))\n            time.sleep(1)\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n    \n        # Locate all Account Names\n        xpath = '''/html[1]/body[1]/div[4]/div[1]/section[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[1]/div[1]/marketplace-comments-relatedto-acc-con-homepage-view-all[1]/article[1]/div[2]/div[1]/div/div[1]/div[2]/p[1]/b[1]/a[1]'''\n        elements = driver.find_elements(By.XPATH, xpath)\n    \n        print(f\" Total elements present : {len(elements)}\")\n    \n        if len(elements) == 0:\n            pytest.skip(\"No Account or Contact found that requires creation or linking. Skipping test case.\")\n    \n        # Click on first unlinked account\n        for element in elements:\n            try:\n                # Skip elements with zero size\n                size = element.size\n                if size['width'] == 0 or size['height'] == 0:\n                    continue\n                driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", element)\n                time.sleep(2)\n                element.click()\n    \n                toast_count = 0  # Counter for the toast message occurrences\n    \n                for _ in range(5):  # Example loop iteration count\n                    try:\n                        toast = wait.until(\n                            EC.element_to_be_clickable((By.XPATH, \"//span[@class='toastMessage forceActionsText']\")))\n                        toast_message = toast.text\n                        if toast_message == \"You do not have permission rights to access this record.\":\n                            toast_count += 1\n                            print(f\"Permission error detected {toast_count} time(s). Trying next element...\")\n                            if toast_count >= 2:  # If message appears twice, skip the test\n                                pytest.skip(\"Test skipped: Permission error occurred twice.\")\n                            time.sleep(5)\n                            continue  # Skip to the next element in the loop\n                    except (NoSuchElementException, TimeoutException) as e:\n                        print(f\"Error: {type(e).__name__}\")\n    \n            except (NoSuchElementException, TimeoutException) as e:\n                print(f\"Error: {type(e).__name__} while clicking {element.text}\")\n            break\n    \n        # Click on linked Account\n>       link_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Link Account']\")))\n\ntests\\Dakota_Home_Tab\\test_member_comment_linking_account.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"23ce8afceb5a24bfd3f531564ed4523e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000024AF4D15EE0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C5C51F55+78133]\nE       \tGetHandleVerifier [0x00007FF7C5C51FB0+78224]\nE       \t(No symbol) [0x00007FF7C5A191BA]\nE       \t(No symbol) [0x00007FF7C5A6F19D]\nE       \t(No symbol) [0x00007FF7C5A6F44C]\nE       \t(No symbol) [0x00007FF7C5AC23D7]\nE       \t(No symbol) [0x00007FF7C5A9719F]\nE       \t(No symbol) [0x00007FF7C5ABF21F]\nE       \t(No symbol) [0x00007FF7C5A96F33]\nE       \t(No symbol) [0x00007FF7C5A60358]\nE       \t(No symbol) [0x00007FF7C5A610C3]\nE       \tGetHandleVerifier [0x00007FF7C5F1BA8D+3001453]\nE       \tGetHandleVerifier [0x00007FF7C5F15E72+2977874]\nE       \tGetHandleVerifier [0x00007FF7C5F3497D+3103581]\nE       \tGetHandleVerifier [0x00007FF7C5C6C7EA+186826]\nE       \tGetHandleVerifier [0x00007FF7C5C743FF+218591]\nE       \tGetHandleVerifier [0x00007FF7C5C59D94+110452]\nE       \tGetHandleVerifier [0x00007FF7C5C59F42+110882]\nE       \tGetHandleVerifier [0x00007FF7C5C40379+5465]\nE       \tBaseThreadInitThunk [0x00007FFCA63EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCA72114FC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1745309702159, "stop": 1745309702172}], "start": 1745309673866, "stop": 1745310061721, "uuid": "968f5875-b559-46c2-bf16-690901744625", "historyId": "7ad0559fb24735d93f544694cdb99bc2", "testCaseId": "7ad0559fb24735d93f544694cdb99bc2", "fullName": "tests.Dakota_Home_Tab.test_member_comment_linking_account#test_member_comment_linking_account", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "Test creation of contacts directly from member comment"}, {"name": "feature", "value": "Dakota Home Tab - Ask Dakota, Link Account"}, {"name": "tag", "value": "release_two"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Dakota_Home_Tab"}, {"name": "suite", "value": "test_member_comment_linking_account"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "5844-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Dakota_Home_Tab.test_member_comment_linking_account"}]}