{"name": "test_list_view_display", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <lightning-base-combobox-item lwc-4kb6kaqheak=\"\" class=\"slds-media slds-listbox__option slds-media_center slds-media_small slds-listbox__option_plain\" data-item-id=\"combobox-button-100-0\" exportparts=\"option\" data-value=\"All\" role=\"option\" id=\"combobox-button-100-0-100\" aria-checked=\"true\" aria-selected=\"true\" lwc-7co8ha3nedg-host=\"\"></lightning-base-combobox-item> is not clickable at point (279, 16). Other element would receive the click: <div aria-live=\"polite\" data-index=\"0\" aria-atomic=\"true\" class=\"slds-notify_alert system-message level-info slds-theme_info\" data-message-id=\"debugModeNotification_22_2025\" data-aura-rendered-by=\"1:160;a\">...</div>\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7E860CF25+75717]\n\tGetHandleVerifier [0x00007FF7E860CF80+75808]\n\t(No symbol) [0x00007FF7E83D8F9A]\n\t(No symbol) [0x00007FF7E8437439]\n\t(No symbol) [0x00007FF7E8434DF2]\n\t(No symbol) [0x00007FF7E8431EA1]\n\t(No symbol) [0x00007FF7E8430DA1]\n\t(No symbol) [0x00007FF7E8422394]\n\t(No symbol) [0x00007FF7E845737A]\n\t(No symbol) [0x00007FF7E8421C46]\n\t(No symbol) [0x00007FF7E8457590]\n\t(No symbol) [0x00007FF7E847F39C]\n\t(No symbol) [0x00007FF7E8457153]\n\t(No symbol) [0x00007FF7E8420421]\n\t(No symbol) [0x00007FF7E84211B3]\n\tGetHandleVerifier [0x00007FF7E890D6FD+3223453]\n\tGetHandleVerifier [0x00007FF7E8907CA2+3200322]\n\tGetHandleVerifier [0x00007FF7E8925AD3+3322739]\n\tGetHandleVerifier [0x00007FF7E86269FA+180890]\n\tGetHandleVerifier [0x00007FF7E862E0FF+211359]\n\tGetHandleVerifier [0x00007FF7E8615274+109332]\n\tGetHandleVerifier [0x00007FF7E8615422+109762]\n\tGetHandleVerifier [0x00007FF7E85FBA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4c0f412aa132015cc0e31a8ce5a8e346\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Default List Views\")\n    @allure.story('Verify default list views (\"All,\" \"Past Conferences\") display correct records based on dates.')\n    def test_list_view_display(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Click on Marketplace Search button\n        try:\n            btn = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[5]\")))\n            btn.click()\n        except (NoSuchElementException, TimeoutException) as e:\n            print(f\"Message: {type(e).__name__}\")\n        time.sleep(1)\n    \n        # Navigate to Conferences Page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Conferences\")\n    \n        # Verify Conference Page Loaded\n        try:\n            element = wait.until(EC.presence_of_element_located((By.XPATH, \"//tbody/tr[1]/th[1]\")))\n            assert element.is_displayed(), \"Conference list is not displayed\"\n        except TimeoutException:\n            pytest.fail(\"Conference list not loaded in time\")\n    \n        # Select and Verify Multiple List Views\n        try:\n            # Define List Views to check\n            list_views = ['All', 'Past']\n    \n            for view in list_views:\n                # Click on the List View dropdown button\n                view_btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@name='Conferences']\")))\n                view_btn.click()\n    \n                # Select View Option\n                view_option = wait.until(\n                    EC.element_to_be_clickable((By.XPATH, f\"//lightning-base-combobox-item[@data-value='{view}']\")))\n>               view_option.click()\n\ntests\\Conferences_Tab\\test_list_view_display.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F823D68910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...E85FBA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF906EBC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <lightning-base-combobox-item lwc-4kb6kaqheak=\"\" class=\"slds-media slds-listbox__option slds-media_center slds-media_small slds-listbox__option_plain\" data-item-id=\"combobox-button-100-0\" exportparts=\"option\" data-value=\"All\" role=\"option\" id=\"combobox-button-100-0-100\" aria-checked=\"true\" aria-selected=\"true\" lwc-7co8ha3nedg-host=\"\"></lightning-base-combobox-item> is not clickable at point (279, 16). Other element would receive the click: <div aria-live=\"polite\" data-index=\"0\" aria-atomic=\"true\" class=\"slds-notify_alert system-message level-info slds-theme_info\" data-message-id=\"debugModeNotification_22_2025\" data-aura-rendered-by=\"1:160;a\">...</div>\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E860CF25+75717]\nE       \tGetHandleVerifier [0x00007FF7E860CF80+75808]\nE       \t(No symbol) [0x00007FF7E83D8F9A]\nE       \t(No symbol) [0x00007FF7E8437439]\nE       \t(No symbol) [0x00007FF7E8434DF2]\nE       \t(No symbol) [0x00007FF7E8431EA1]\nE       \t(No symbol) [0x00007FF7E8430DA1]\nE       \t(No symbol) [0x00007FF7E8422394]\nE       \t(No symbol) [0x00007FF7E845737A]\nE       \t(No symbol) [0x00007FF7E8421C46]\nE       \t(No symbol) [0x00007FF7E8457590]\nE       \t(No symbol) [0x00007FF7E847F39C]\nE       \t(No symbol) [0x00007FF7E8457153]\nE       \t(No symbol) [0x00007FF7E8420421]\nE       \t(No symbol) [0x00007FF7E84211B3]\nE       \tGetHandleVerifier [0x00007FF7E890D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF7E8907CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF7E8925AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF7E86269FA+180890]\nE       \tGetHandleVerifier [0x00007FF7E862E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF7E8615274+109332]\nE       \tGetHandleVerifier [0x00007FF7E8615422+109762]\nE       \tGetHandleVerifier [0x00007FF7E85FBA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748323394562, "stop": 1748323394605}], "start": 1748323332568, "stop": 1748323403500, "uuid": "387adad0-d03b-4499-b3c0-538e76bc360f", "historyId": "85c653f28175797e5f2aafc73ca9302b", "testCaseId": "85c653f28175797e5f2aafc73ca9302b", "fullName": "tests.Conferences_Tab.test_list_view_display#test_list_view_display", "labels": [{"name": "story", "value": "Verify default list views (\"All,\" \"Past Conferences\") display correct records based on dates."}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Default List Views"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.Conferences_Tab"}, {"name": "suite", "value": "test_list_view_display"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "3556-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Conferences_Tab.test_list_view_display"}]}