{"name": "test_member_comment_create_contact_from_contact", "status": "passed", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\n\tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\n\t(No symbol) [0x00007FF6C3918F9A]\n\t(No symbol) [0x00007FF6C3904E35]\n\t(No symbol) [0x00007FF6C3929DB4]\n\t(No symbol) [0x00007FF6C399EE75]\n\t(No symbol) [0x00007FF6C39BECC2]\n\t(No symbol) [0x00007FF6C3997153]\n\t(No symbol) [0x00007FF6C3960421]\n\t(No symbol) [0x00007FF6C39611B3]\n\tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\n\tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\n\tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\n\tGetHandleVerifier [0x00007FF6C3B669FA+180890]\n\tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\n\tGetHandleVerifier [0x00007FF6C3B55274+109332]\n\tGetHandleVerifier [0x00007FF6C3B55422+109762]\n\tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5e23fba9b20d9eeea381089da58460c\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    @pytest.mark.release_two\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Dakota Home Tab - Ask Dakota, Create Contact\")\n    @allure.story(\"Test creation of contacts directly from member comment\")\n    def test_member_comment_create_contact_from_contact(driver, config):\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 30, poll_frequency=0.5)\n    \n        # Login block\n        try:\n            wait.until(EC.element_to_be_clickable((By.ID, \"username\"))).send_keys(config[\"username\"])\n            wait.until(EC.element_to_be_clickable((By.ID, \"password\"))).send_keys(config[\"password\"])\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.ID, \"Login\"))).click()\n        except Exception as e:\n            driver.quit()\n            pytest.skip(f\"Skipping test due to login failure: {type(e).__name__}\")\n    \n        # Confirm login success\n        try:\n            wait.until(EC.presence_of_element_located((By.XPATH, \"//button[@title='App Launcher']\")))\n            print(\"App Launcher is found\")\n        except Exception as e:\n            driver.quit()\n            pytest.skip(f\"Skipping test due to missing App Launcher: {type(e).__name__}\")\n    \n        # Navigate to Dakota Home Page\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Home\")\n    \n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        # Print Section name\n        btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[@class='title-div'][normalize-space()='Ask Dakota']\")))\n        driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'start'});\", btn)\n        time.sleep(1)\n        print(f\"Section Name : {btn.text}\")\n    \n        # Click on View all button\n        view_all = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//a[contains(text(),'View All')])[2]\")))\n        view_all.click()\n    \n        # Wait for records display\n        try:\n>           WebDriverWait(driver, 20).until(EC.presence_of_all_elements_located((By.XPATH, \"(//td[@data-label='Last Updated Date'])[1]\")))\n\ntests\\Dakota_Home_Tab\\test_member_change_create_contact.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:297: in _predicate\n    return driver.find_elements(*locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:952: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F565E33F70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...C3B3BA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF906EBC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\nE       \t(No symbol) [0x00007FF6C3918F9A]\nE       \t(No symbol) [0x00007FF6C3904E35]\nE       \t(No symbol) [0x00007FF6C3929DB4]\nE       \t(No symbol) [0x00007FF6C399EE75]\nE       \t(No symbol) [0x00007FF6C39BECC2]\nE       \t(No symbol) [0x00007FF6C3997153]\nE       \t(No symbol) [0x00007FF6C3960421]\nE       \t(No symbol) [0x00007FF6C39611B3]\nE       \tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF6C3B669FA+180890]\nE       \tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF6C3B55274+109332]\nE       \tGetHandleVerifier [0x00007FF6C3B55422+109762]\nE       \tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1748272142512, "stop": 1748272198268, "uuid": "18687004-4b35-477a-9841-bc7c395b18e9", "historyId": "62bcb204760e53088f0b931b1d081192", "testCaseId": "62bcb204760e53088f0b931b1d081192", "fullName": "tests.Dakota_Home_Tab.test_member_change_create_contact#test_member_comment_create_contact_from_contact", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "Dakota Home Tab - Ask Dakota, Create Contact"}, {"name": "story", "value": "Test creation of contacts directly from member comment"}, {"name": "tag", "value": "release_two"}, {"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Dakota_Home_Tab"}, {"name": "suite", "value": "test_member_change_create_contact"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "14504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Dakota_Home_Tab.test_member_change_create_contact"}]}