{"name": "test_permission_set_users", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\n\tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\n\t(No symbol) [0x00007FF6C3918F9A]\n\t(No symbol) [0x00007FF6C396F4C6]\n\t(No symbol) [0x00007FF6C396F77C]\n\t(No symbol) [0x00007FF6C39C2577]\n\t(No symbol) [0x00007FF6C39973BF]\n\t(No symbol) [0x00007FF6C39BF39C]\n\t(No symbol) [0x00007FF6C3997153]\n\t(No symbol) [0x00007FF6C3960421]\n\t(No symbol) [0x00007FF6C39611B3]\n\tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\n\tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\n\tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\n\tGetHandleVerifier [0x00007FF6C3B669FA+180890]\n\tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\n\tGetHandleVerifier [0x00007FF6C3B55274+109332]\n\tGetHandleVerifier [0x00007FF6C3B55422+109762]\n\tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\n\tBaseThreadInitThunk [0x00007FF90625E8D7+23]\n\tRtlUserThreadStart [0x00007FF906EBC5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"864f99046a4727ba99fea433e5635774\")>\nconfig = {'base_url': 'https://dakotanetworks--sfapptest.sandbox.lightning.force.com/', 'password': 'Rolus@123', 'uat_base_url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.Skipped\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Permission Sets\")\n    @allure.story(\"Ensure permission sets User restrict or grant access as expected.\")\n    def test_permission_set_users(driver, config):\n        # Navigate to login page\n        driver.get(config[\"base_url\"])\n        driver.delete_all_cookies()\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            try:\n                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[2]\"))).click()\n            except Exception as e:\n                pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n                driver.quit()\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to installed package Page\n        package_url = f\"{config['base_url']}lightning/setup/PermSets/home\"\n        driver.get(package_url)\n    \n        # Verify page title\n        try:\n            expected_title = \"Lightning Experience\"\n            actual_title = driver.title\n            assert actual_title == expected_title, f\"Page title mismatch: Expected '{expected_title}', but got '{actual_title}'\"\n        except Exception as e:\n            pytest.fail(f\"Title Verification Failed: {e}\")\n    \n        try:\n            # Locate and switch to the iframe\n            iframe_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//iframe[@title='Permission Sets ~ Salesforce - Enterprise Edition']\")))\n            driver.switch_to.frame(iframe_element)\n            time.sleep(1)\n            print(f\"Successfully switched to {iframe_element.text} iframe\")\n        except Exception as e:\n            print(str(e).split(\":\")[0])\n    \n        try:\n            # Verify the Admin User Permission Set presence ?\n            xpath = '''/html[1]/body[1]/div[3]/div[1]/form[1]/div[3]/div[4]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div/table/tbody/tr/td[4]/div/a/span'''\n            all_permission = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n            permission_found = False\n    \n            for permission in all_permission:\n                if permission.text.strip() == \"Dakota Marketplace User\":\n                    print(f\"{permission.text} is present\")\n                    permission.click()\n                    permission_found = True\n                    break\n    \n            if not permission_found:\n                print(\"Test case failed due to absence of 'Dakota Marketplace Admin' permission\")\n                driver.quit()\n        except Exception as e:\n            print(str(e).split(\":\")[0])\n            driver.quit()\n    \n        # Switched out of iframe\n        driver.switch_to.default_content()\n        time.sleep(1)\n    \n    \n        try:\n            # Switch to iframe\n            iframe_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//iframe[@title='Permission Set: Dakota Marketplace User ~ Salesforce - Enterprise Edition']\")))\n            driver.switch_to.frame(iframe_element)\n            time.sleep(1)\n            print(f\"Successfully switched to {iframe_element.text} iframe\")\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        try:\n            # Click on Manage Assignment button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='page:console:pc_form:button_manage_assignments']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n        # Switched out of iframe\n        driver.switch_to.default_content()\n        time.sleep(1)\n    \n        try:\n            # Click on Add Assignment button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Add Assignment']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        try:\n            # Store the current username\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='uiImage'])[1]\")))\n            btn.click()\n            profile_name = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//a[@class='profile-link-label'])[1]\"))).text\n            driver.find_element(By.XPATH, \"//button[@title='Close']//lightning-primitive-icon[@variant='bare']\").click()\n    \n            # Enter and Search the UserName\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@name='User-search-input']\")))\n            btn.send_keys(profile_name)\n            driver.find_element(By.XPATH, \"//button[@title='Refresh']//lightning-primitive-icon[@exportparts='icon']\").click()\n            time.sleep(5)\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n    \n        try:\n            # Add Searched user and click on NEXT button\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[@class='slds-checkbox--faux slds-checkbox_faux'])[2]\")))\n            btn.click()\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Next']\")))\n            btn.click()\n            btn = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Assign']\")))\n            btn.click()\n        except Exception as e:\n            print(str(e).split(\":\")[1])\n    \n        # Verify the Result\n>       status = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-formatted-text[@class='slds-m-left_x-small']\")))\n\ntests\\Permission_Sets\\test_permission_set_access_users.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"864f99046a4727ba99fea433e5635774\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001F565A263E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C3B4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF6C3B4CF80+75808]\nE       \t(No symbol) [0x00007FF6C3918F9A]\nE       \t(No symbol) [0x00007FF6C396F4C6]\nE       \t(No symbol) [0x00007FF6C396F77C]\nE       \t(No symbol) [0x00007FF6C39C2577]\nE       \t(No symbol) [0x00007FF6C39973BF]\nE       \t(No symbol) [0x00007FF6C39BF39C]\nE       \t(No symbol) [0x00007FF6C3997153]\nE       \t(No symbol) [0x00007FF6C3960421]\nE       \t(No symbol) [0x00007FF6C39611B3]\nE       \tGetHandleVerifier [0x00007FF6C3E4D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF6C3E47CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF6C3E65AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF6C3B669FA+180890]\nE       \tGetHandleVerifier [0x00007FF6C3B6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF6C3B55274+109332]\nE       \tGetHandleVerifier [0x00007FF6C3B55422+109762]\nE       \tGetHandleVerifier [0x00007FF6C3B3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF90625E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF906EBC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1748269082917, "stop": 1748269083001}], "start": 1748269054552, "stop": 1748269210712, "uuid": "3012d268-b465-4196-a20f-2af9b84a89e5", "historyId": "013d770a4e4c3e4de61181a9089fc08e", "testCaseId": "013d770a4e4c3e4de61181a9089fc08e", "fullName": "tests.Permission_Sets.test_permission_set_access_users#test_permission_set_users", "labels": [{"name": "feature", "value": "Permission Sets"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Ensure permission sets User restrict or grant access as expected."}, {"name": "tag", "value": "Skipped"}, {"name": "parentSuite", "value": "tests.Permission_Sets"}, {"name": "suite", "value": "test_permission_set_access_users"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "14504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Permission_Sets.test_permission_set_access_users"}]}