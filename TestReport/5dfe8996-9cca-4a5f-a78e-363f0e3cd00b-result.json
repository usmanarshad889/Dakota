{"name": "test_filter_logic_in_investment_preference", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF66E10FE45+26629]\n\t(No symbol) [0x00007FF66E076010]\n\t(No symbol) [0x00007FF66DF0931A]\n\t(No symbol) [0x00007FF66DF5F8E7]\n\t(No symbol) [0x00007FF66DF5FB1C]\n\t(No symbol) [0x00007FF66DFB34A7]\n\t(No symbol) [0x00007FF66DF87AEF]\n\t(No symbol) [0x00007FF66DFB0169]\n\t(No symbol) [0x00007FF66DF87883]\n\t(No symbol) [0x00007FF66DF50550]\n\t(No symbol) [0x00007FF66DF51803]\n\tGetHandleVerifier [0x00007FF66E4672BD+3529853]\n\tGetHandleVerifier [0x00007FF66E47DA22+3621858]\n\tGetHandleVerifier [0x00007FF66E4724D3+3575443]\n\tGetHandleVerifier [0x00007FF66E1DB77A+860474]\n\t(No symbol) [0x00007FF66E08088F]\n\t(No symbol) [0x00007FF66E07CBC4]\n\t(No symbol) [0x00007FF66E07CD66]\n\t(No symbol) [0x00007FF66E06C2C9]\n\tBaseThreadInitThunk [0x00007FFF6D7EE8D7+23]\n\tRtlUserThreadStart [0x00007FFF6EEB14FC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"36a368f132e56380343ca1e775b04f83\")>\nconfig = {'base_url': 'https://dakotanetworks--fuseupgrad.sandbox.my.salesforce-setup.com/', 'password': 'LOWYqfakgQ8oo', 'uat_...url': 'https://dakotanetworks--uat.sandbox.lightning.force.com/', 'uat_login_url': 'https://test.salesforce.com/', ...}\n\n    @pytest.mark.P1\n    def test_filter_logic_in_investment_preference(driver, config):\n        # Navigate to login page of fuse app\n        driver.get(config[\"base_url\"])\n        wait = WebDriverWait(driver, 60, poll_frequency=0.5)\n    \n        try:\n            # Perform login\n            username = wait.until(EC.element_to_be_clickable((By.ID, \"username\")))\n            username.send_keys(config[\"username\"])\n            password = wait.until(EC.element_to_be_clickable((By.ID, \"password\")))\n            password.send_keys(config[\"password\"])\n            login_button = wait.until(EC.element_to_be_clickable((By.ID, \"Login\")))\n            time.sleep(2)\n            login_button.click()\n            time.sleep(3)\n    \n            # Wait for URL change\n            wait.until(EC.url_contains(\"lightning.force.com\"))\n    \n            # Verify Login\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//one-app-nav-bar-item-root[5]\"))).click()\n            time.sleep(2)\n    \n        except Exception as e:\n            pytest.skip(f\"Skipping test due to unexpected login error: {type(e).__name__}\")\n            driver.quit()\n    \n    \n        with allure.step(\"Waiting for Document Ready State to be Complete\"):\n            WebDriverWait(driver, 90).until(\n                lambda d: print(\"Current Ready State:\", d.execute_script('return document.readyState')) or\n                          d.execute_script('return document.readyState') == 'complete'\n            )\n        print(\"Document Ready State is COMPLETE!\")\n        time.sleep(1)\n    \n    \n        # Navigate to Dakota Marketplace Search Tab\n        driver.get(f\"{config['base_url']}lightning/n/Marketplace__Dakota_Search\")\n        time.sleep(20)\n    \n    \n        # Click on Investment Preference Button\n        try:\n            button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='openChevron']//button[@type='button']\")))\n            button.click()\n        except Exception as e:\n            pytest.skip(f\"Investment Preference Button is not interactable due to slow loading ... skipping test : {type(e).__name__}\")\n    \n    \n        # Select a field\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@placeholder='Select a field']\")))\n        button.click()\n    \n        all_options = wait.until(EC.presence_of_all_elements_located((By.XPATH, \"//li[contains(@class,'slds-setup-assistant__item')]//li\")))\n    \n        for option in all_options:\n            if option.text.strip() == '1031 Exchange':\n                driver.execute_script(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", option)\n                time.sleep(1)\n                option.click()\n                break\n    \n    \n        # Select an operator\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@aria-haspopup='listbox'])[1]\")))\n        button.click()\n    \n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//lightning-base-combobox-item[@data-value='$not_equals']\")))\n        button.click()\n    \n    \n        # Select value\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@aria-haspopup='listbox'])[2]\")))\n        button.click()\n    \n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//span[contains(@title,'Yes')]\")))\n        button.click()\n    \n    \n        # Add a new filter\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@title,'Add Filter')]\")))\n        button.click()\n    \n    \n        # Select a field\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@placeholder='Select a field'])[2]\")))\n        button.click()\n    \n        # Start looping from 60 onwards\n        r = 61  # Start index\n        while True:  # Infinite loop, will break when 'Bank Loans' is found\n            try:\n                xpath = f\"(//li[@role='presentation' and contains(@data-aura-class, 'MarketplaceDisplayFields')])[{r}]\"\n                option = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))\n    \n                # Check if it's 'Bank Loans'\n                if option.text.strip() == 'Bank Loans':\n                    driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", option)\n                    time.sleep(1)  # Ensure visibility before clicking\n                    option.click()\n                    break  # Stop loop when found\n    \n                r += 1  # Move to next option if not found\n    \n            except Exception as e:\n                pytest.skip(f\"Skipping test .... : {type(e).__name__}\")\n                break\n    \n        # Select an operator\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@aria-haspopup='listbox'])[3]\")))\n        button.click()\n    \n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//lightning-base-combobox-item[@data-value='$equals'])[2]\")))\n        button.click()\n    \n    \n        # Select value\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//button[@aria-haspopup='listbox'])[4]\")))\n        button.click()\n    \n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//span[contains(@title,'No')][normalize-space()='No'])[2]\")))\n        button.click()\n    \n    \n        # Click on Edit button\n        button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@title,'Edit Filter Logic')]\")))\n        button.click()\n    \n    \n        # Edit Logic\n        logic_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"(//input[@class='slds-input' and @type='text'])[3]\")))\n        logic_field.click()\n        logic_field.clear()\n        logic_field.send_keys(\"1 OR 2\")\n    \n    \n        # Click on Yes button\n>       button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(@title,'Validate Filter Logic')]\")))\n\ntests\\Version_Specific_Features\\test_filter_logic_in_investment_preference.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"36a368f132e56380343ca1e775b04f83\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001EFCB02ED40>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66E10FE45+26629]\nE       \t(No symbol) [0x00007FF66E076010]\nE       \t(No symbol) [0x00007FF66DF0931A]\nE       \t(No symbol) [0x00007FF66DF5F8E7]\nE       \t(No symbol) [0x00007FF66DF5FB1C]\nE       \t(No symbol) [0x00007FF66DFB34A7]\nE       \t(No symbol) [0x00007FF66DF87AEF]\nE       \t(No symbol) [0x00007FF66DFB0169]\nE       \t(No symbol) [0x00007FF66DF87883]\nE       \t(No symbol) [0x00007FF66DF50550]\nE       \t(No symbol) [0x00007FF66DF51803]\nE       \tGetHandleVerifier [0x00007FF66E4672BD+3529853]\nE       \tGetHandleVerifier [0x00007FF66E47DA22+3621858]\nE       \tGetHandleVerifier [0x00007FF66E4724D3+3575443]\nE       \tGetHandleVerifier [0x00007FF66E1DB77A+860474]\nE       \t(No symbol) [0x00007FF66E08088F]\nE       \t(No symbol) [0x00007FF66E07CBC4]\nE       \t(No symbol) [0x00007FF66E07CD66]\nE       \t(No symbol) [0x00007FF66E06C2C9]\nE       \tBaseThreadInitThunk [0x00007FFF6D7EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFF6EEB14FC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "steps": [{"name": "Waiting for Document Ready State to be Complete", "status": "passed", "start": 1743675446404, "stop": 1743675454180}], "start": 1743675418332, "stop": 1743675554821, "uuid": "d9d8898f-bcb7-42d5-8c97-fafc72e8a07d", "historyId": "c06855339531f47b9ea007265ba64c8b", "testCaseId": "c06855339531f47b9ea007265ba64c8b", "fullName": "tests.Version_Specific_Features.test_filter_logic_in_investment_preference#test_filter_logic_in_investment_preference", "labels": [{"name": "tag", "value": "P1"}, {"name": "parentSuite", "value": "tests.Version_Specific_Features"}, {"name": "suite", "value": "test_filter_logic_in_investment_preference"}, {"name": "host", "value": "RT-LT-597"}, {"name": "thread", "value": "5472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Version_Specific_Features.test_filter_logic_in_investment_preference"}]}